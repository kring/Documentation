{
    "docs": [
        {
            "location": "/", 
            "text": "Getting Started\n: quick start guide to building your first TerriaJS application.\n\n\nDeployment\n: getting started with deploying Terria and optional support services. For developers, sysadmins and hackers.\n\n\nCustomizing\n: How to configure and tweak Terria, including skinning, URL parameters and advanced uses.\n\n\nCatalog Management\n: tips for data providers and catalog managers about working with specific data source types and managing catalog files, dealing with servers that don't support CORS.\n\n\nContributors\n: How to add new features to Terria, be part of the TerriaJS development team, how to set up a development environment, how to write tests and perform code reviews.\n\n\n\n\nLooking for help using a Terria-based site? Try \nhow to access data through NationalMap\n.\n\n\nThis documentation is maintained at \ngithub.com/TerriaJS/TerriaJS/tree/master/Documentation\n.\n\n\nIt can be viewed at \nterria.io/Documentation\n.", 
            "title": "Home"
        }, 
        {
            "location": "/GettingStarted/", 
            "text": "Getting Started\n\n\nThe easiest way to get started with TerriaJS is to use \nTerriaMap\n.  TerriaMap is a full-featured application built on TerriaJS, ready to be customized with your own branding and catalog.  It is also a great starting point for more in-depth customization.\n\n\nThis guide explains how to build and run TerriaMap locally.  See \nDeployment\n to learn how to deploy it for use by others.\n\n\nQuick Start\n\n\nIf you've done this sort of thing before, you'll find it easy to clone and build TerriaMap with these quick instructions:\n\n\ngit clone https://github.com/TerriaJS/TerriaMap.git\n\ncd TerriaMap\n\nnpm install \n npm run build \n npm start\n\n# Open at http://localhost:3001\n\n\n\n\nIf you run into trouble or want more explanation, read on.\n\n\nPrerequisites\n\n\nTerriaJS can be built and run on almost any macOS, Linux, or Windows system.  The following are required to build TerriaJS:\n\n\n\n\nNode.js\n v5.10 or later.  v6.x and v7.x are also known to work, and later major versions are likely to work as well.  You can check your node version by running \nnode --version\n on the command-line.\n\n\nnpm\n v3.0 or later.  This is usually installed automatically alongside the above.  You can check your npm version by running \nnpm --version\n.\n\n\n\n\nThe following components are optional:\n\n\n\n\nGDAL\n - Used for the conversion service that transforms Esri Shapefiles and other more obscure formats into GeoJSON for display in TerriaJS.  This is \nnot\n required for formats that TerriaJS supports directly, including KML, GeoJSON, etc.\n\n\n\n\nCloning TerriaMap\n\n\nThe latest version of TerriaMap is on \nGitHub\n, and the preferred way to get it is by using \ngit\n:\n\n\ngit clone https://github.com/TerriaJS/TerriaMap.git\n\ncd TerriaMap\n\n\n\n\nIf you're unable to use git, you can also \ndownload a ZIP file\n and extract it somewhere on your system.  We recommend using git, though, because it makes it much easier to update to later versions in the future.\n\n\nInstalling Dependencies\n\n\nAll of the dependencies required to build and run TerriaMap, other than the prerequisites listed above, are installed using \nnpm\n:\n\n\nnpm install\n\n\n\n\nThe dependencies are installed in the \nnode_modules\n subdirectory.  No global changes are made to your system.\n\n\nBuilding TerriaMap\n\n\nDo a standard build of TerriaMap with:\n\n\nnpm run build\n\n\n\n\nOr, you can create a minified release build with:\n\n\nnpm run build release\n\n\n\n\nTo watch for changes and automatically do an incremental build when any are detected, use:\n\n\nnpm run build watch\n\n\n\n\nnpm run build\n simply runs \ngulp\n, so you can use that directly if you prefer.\n\n\nThe full set of \ngulp\n tasks can be found on the \nDevelopment Environment\n page.\n\n\nKeeping up with Updates\n\n\nIf you're building an application by using TerriaMap as a starting point, you will want to keep in sync as TerriaMap is improved and updated to use new versions of TerriaJS.  Forking the TerriaMap repo and using git to keep it in sync is outside the scope of this document, but GitHub has a \nnice explanation\n.\n\n\nAfter pulling new changes, you will need to run \nnpm install\n again to pick up any changed dependencies and then build TerriaMap.  If you have problems building or running, it is sometimes helpful to remove and reinstall the dependencies from npm:\n\n\nrm -rf node_modules\nnpm install\n\n\n\n\nNext Steps\n\n\nNow that you have a working local build of TerriaMap, you may want to \ncustomize it\n or \ndeploy it\n for others to use.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/GettingStarted/#getting-started", 
            "text": "The easiest way to get started with TerriaJS is to use  TerriaMap .  TerriaMap is a full-featured application built on TerriaJS, ready to be customized with your own branding and catalog.  It is also a great starting point for more in-depth customization.  This guide explains how to build and run TerriaMap locally.  See  Deployment  to learn how to deploy it for use by others.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/GettingStarted/#quick-start", 
            "text": "If you've done this sort of thing before, you'll find it easy to clone and build TerriaMap with these quick instructions:  git clone https://github.com/TerriaJS/TerriaMap.git\n\ncd TerriaMap\n\nnpm install   npm run build   npm start\n\n# Open at http://localhost:3001  If you run into trouble or want more explanation, read on.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/GettingStarted/#prerequisites", 
            "text": "TerriaJS can be built and run on almost any macOS, Linux, or Windows system.  The following are required to build TerriaJS:   Node.js  v5.10 or later.  v6.x and v7.x are also known to work, and later major versions are likely to work as well.  You can check your node version by running  node --version  on the command-line.  npm  v3.0 or later.  This is usually installed automatically alongside the above.  You can check your npm version by running  npm --version .   The following components are optional:   GDAL  - Used for the conversion service that transforms Esri Shapefiles and other more obscure formats into GeoJSON for display in TerriaJS.  This is  not  required for formats that TerriaJS supports directly, including KML, GeoJSON, etc.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/GettingStarted/#cloning-terriamap", 
            "text": "The latest version of TerriaMap is on  GitHub , and the preferred way to get it is by using  git :  git clone https://github.com/TerriaJS/TerriaMap.git\n\ncd TerriaMap  If you're unable to use git, you can also  download a ZIP file  and extract it somewhere on your system.  We recommend using git, though, because it makes it much easier to update to later versions in the future.", 
            "title": "Cloning TerriaMap"
        }, 
        {
            "location": "/GettingStarted/#installing-dependencies", 
            "text": "All of the dependencies required to build and run TerriaMap, other than the prerequisites listed above, are installed using  npm :  npm install  The dependencies are installed in the  node_modules  subdirectory.  No global changes are made to your system.", 
            "title": "Installing Dependencies"
        }, 
        {
            "location": "/GettingStarted/#building-terriamap", 
            "text": "Do a standard build of TerriaMap with:  npm run build  Or, you can create a minified release build with:  npm run build release  To watch for changes and automatically do an incremental build when any are detected, use:  npm run build watch  npm run build  simply runs  gulp , so you can use that directly if you prefer.  The full set of  gulp  tasks can be found on the  Development Environment  page.", 
            "title": "Building TerriaMap"
        }, 
        {
            "location": "/GettingStarted/#keeping-up-with-updates", 
            "text": "If you're building an application by using TerriaMap as a starting point, you will want to keep in sync as TerriaMap is improved and updated to use new versions of TerriaJS.  Forking the TerriaMap repo and using git to keep it in sync is outside the scope of this document, but GitHub has a  nice explanation .  After pulling new changes, you will need to run  npm install  again to pick up any changed dependencies and then build TerriaMap.  If you have problems building or running, it is sometimes helpful to remove and reinstall the dependencies from npm:  rm -rf node_modules\nnpm install", 
            "title": "Keeping up with Updates"
        }, 
        {
            "location": "/GettingStarted/#next-steps", 
            "text": "Now that you have a working local build of TerriaMap, you may want to  customize it  or  deploy it  for others to use.", 
            "title": "Next Steps"
        }, 
        {
            "location": "/CatalogManagement/", 
            "text": "Catalog management\n\n\nTips for working with specific spatial file types and services:\n\n\n\n\nCKAN\n\n\nGeoJSON\n\n\nWeb Map Service (WMS)\n\n\n\n\nSee also the National Map \nData providers guide\n.\n\n\nOther issues to consider with TerriaJS catalogs:\n\n\n\n\nPerformance testing\n\n\nIssues with CORS\n\n\nCatalog (init) files\n\n\nFormat conversion service", 
            "title": "Overview"
        }, 
        {
            "location": "/CatalogManagement/#catalog-management", 
            "text": "Tips for working with specific spatial file types and services:   CKAN  GeoJSON  Web Map Service (WMS)   See also the National Map  Data providers guide .  Other issues to consider with TerriaJS catalogs:   Performance testing  Issues with CORS  Catalog (init) files  Format conversion service", 
            "title": "Catalog management"
        }, 
        {
            "location": "/CatalogManagement/CKAN/", 
            "text": "CKAN is data catalogue software used by the Australian Government (http://data.gov.au), many Australian State Governments (eg http://data.sa.gov.au), the US government (http://data.gov), the UK government (http://data.gov.uk) and many others. Depending on its configuration, spatial files may be hosted directly (such as .geojson files), or it may contain links to WMS services.\n\n\nCKAN does not have a simple filter for geospatial datasets, so the CKAN group type uses the CKAN API and several heuristics to attempt to locate them.\n\n\nYou can make this easier by:\n\n\n\n\ntagging all spatial CSV's \ncsv-geo-au\n\n\nproviding GeoJSON versions of all spatial files", 
            "title": "CKAN"
        }, 
        {
            "location": "/CatalogManagement/GeoJSON/", 
            "text": "TerriaJS supports common coordinate reference systems. We recommend you use, in decreasing preference:\n\n\n\n\nEPSG:4326 (unprojected lat/longs)\n\n\nEPSG:3785 (Web Mercator)\n\n\nEPSG:4283 (GDA94)\n\n\n\n\nGeoJSON files can be styled using \nsimplestyle\n.", 
            "title": "GeoJSON"
        }, 
        {
            "location": "/CatalogManagement/Web-Map-Service/", 
            "text": "To get quick performance in Terria, your server \nmust be configured with cached map tiles\n. Ensure the cache is populated for every layer.\n\n\nMap tiles should be served in 50ms or less, with 400ms considered the absolute maximum for acceptable user experience. To measure the speed, use the Dataset Testing tool:\n\n\n\n\nAdd \n#tools=1\n to the end of your Terria URL (for instance, \nhttp://nationalmap.gov.au/#tools=1\n)\n\n\nOpen the group you wish to test\n\n\nClick \nTools\n in the menu at the top right\n\n\nChoose settings: \nAll Opened\n tests every opened group, \nAll Enabled\n tests only individual datasets that are selected. You can set a specific tile zoom range to test as well.\n\n\nClick \nRequest Tiles\n.\n\n\n\n\nFor each dataset, you will see whether all tiles were successfully retrieved, and the average and maximum response time.", 
            "title": "Web Map Service (WMS)"
        }, 
        {
            "location": "/CatalogManagement/Performance-testing/", 
            "text": "To measure the speed of access to specific datasets, use the Dataset Testing tool.  To use this:\n\n\nAdd #tools=1 to the end of your Terria URL (for instance, http://nationalmap.gov.au/#tools=1)\n\n\n\n\nOpen the group you wish to test\n\n\nClick Tools in the menu at the top right\n\n\nChoose settings: All Opened tests every opened group, All Enabled tests only individual datasets that are selected. You can set a specific tile zoom range to test as well.\n\n\nClick Request Tiles.\n\n\n\n\nFor each dataset, you will see whether all tiles were successfully retrieved, and the average and maximum response time.", 
            "title": "Performance Testing"
        }, 
        {
            "location": "/CatalogManagement/Handling-CORS/", 
            "text": "Handling Cross-Origin-Resource-Sharing (CORS) issues\n\n\nA common problem when you add a new data source to TerriaJS is this error:\n\n\n...the server does not support CORS. If this is your server, verify that CORS is enabled and enable it if it is not. If you do not control the server, please contact the administrator of the server and ask them to enable CORS. Or ... ask us to add this server to the list of non-CORS-supporting servers that may be proxied.\n\n\nTo resolve this, you need to add all servers you intend to access to \ndevserverconfig.json\n's \nallowProxyFor\n list. This \"whitelist\" authorizes the proxy to work with those servers. \nEven servers that support CORS should be in that list because IE9 doesn't support CORS, so it needs the proxy for all cross-origin requests.\n\n\nThen, you should add servers that \ndo\n support CORS to the \nwwwroot\\init\\xyz.json\n's \ncorsDomains\n list. Servers in this list are contacted directly instead of going through the proxy... except:\n- in IE9\n- if an HTTPS web page is accessing an HTTP server (this way we avoid a mixed content warning from the browser).\n\n\nIf your server does \nnot\n support CORS, then you still need to add it to the \nallowProxyFor\n whitelist, but do not add it to the \ncorsDomains\n list. It will then be proxied.\n\n\nSometimes we deliberately exclude CORS-supporting servers from the \ncorsDomains\n list; the proxy caches its data, so we leverage its caching to improve performance.\n\n\nIn both lists, a server name \nfoo.org\n can be interpreted as \n*.foo.org\n. The port must match exactly. It's not very smart, so if you specify port 80 that won't match a server without a port specified, and vice-versa.\n\n\nThe downside to a permissive whitelist is that you'll proxy for more servers, and people could use your proxy to make their (malicious?) traffic look like it's coming from your server instead of from theirs.", 
            "title": "Issues with CORS"
        }, 
        {
            "location": "/CatalogManagement/Handling-CORS/#handling-cross-origin-resource-sharing-cors-issues", 
            "text": "A common problem when you add a new data source to TerriaJS is this error:  ...the server does not support CORS. If this is your server, verify that CORS is enabled and enable it if it is not. If you do not control the server, please contact the administrator of the server and ask them to enable CORS. Or ... ask us to add this server to the list of non-CORS-supporting servers that may be proxied.  To resolve this, you need to add all servers you intend to access to  devserverconfig.json 's  allowProxyFor  list. This \"whitelist\" authorizes the proxy to work with those servers.  Even servers that support CORS should be in that list because IE9 doesn't support CORS, so it needs the proxy for all cross-origin requests.  Then, you should add servers that  do  support CORS to the  wwwroot\\init\\xyz.json 's  corsDomains  list. Servers in this list are contacted directly instead of going through the proxy... except:\n- in IE9\n- if an HTTPS web page is accessing an HTTP server (this way we avoid a mixed content warning from the browser).  If your server does  not  support CORS, then you still need to add it to the  allowProxyFor  whitelist, but do not add it to the  corsDomains  list. It will then be proxied.  Sometimes we deliberately exclude CORS-supporting servers from the  corsDomains  list; the proxy caches its data, so we leverage its caching to improve performance.  In both lists, a server name  foo.org  can be interpreted as  *.foo.org . The port must match exactly. It's not very smart, so if you specify port 80 that won't match a server without a port specified, and vice-versa.  The downside to a permissive whitelist is that you'll proxy for more servers, and people could use your proxy to make their (malicious?) traffic look like it's coming from your server instead of from theirs.", 
            "title": "Handling Cross-Origin-Resource-Sharing (CORS) issues"
        }, 
        {
            "location": "/CatalogManagement/Initialization-File/", 
            "text": "Catalog (init) files\n\n\nA catalog in Terria is defined in one or more catalog files (also known as \"init files\"). Each is a \nJSON file\n with this basic structure:\n\n\n{\n    \ncatalog\n: [\n        {\n            \ntype\n: \ngroup\n,\n            \nname\n: \nMy group\n,\n            \nitems\n: [\n            ...\n            ]\n        },\n        ...\n    ],\n    \nhomeCamera\n: {\n        \nnorth\n: -8,\n        \neast\n: 158,\n        \nsouth\n: -45,\n        \nwest\n: 109\n    },\n    \ninitialCamera\n: { ... },\n    \ncorsDomains\n: [ \nmyserver.gov.au\n ]\n}\n\n\n\n\nKey points:\n\n\n\n\ncatalog\n is an array\n\n\nEvery element of that array must have a \ntype\n (corresponding to a value recognised by TerriaJS) and a \nname\n\n\nThe three major categories of catalog member types are:\n\n\ngroup\n: a manually defined grouping of layers\n\n\nitem types such as \ngeojson\n, \nwms\n, \nwfs\n and \nesri-mapServer\n, which refer to one single layer\n\n\ngroup types such as \nckan\n, \nwms-getCapabilities\n and \nesri-mapServer-group\n\n\n\n\n\n\n\n\nMost of the other properties of each layer depend on the specific type. We're working on generating documentation for each type. Meanwhile, you can look at the source code in Terria's \n/Models\n folder.\n\n\nUsing a catalog file\n\n\nThere are four ways to load a catalog file into Terria:\n\n\n\n\nStore it in Terria's \nwwwroot/init\n directory, and refer to it in the \ninitializationUrls\n section of the \nconfig.json\n file. It is loaded automatically when you visit the webpage.\n\n\nStore it in Terria's \nwwwroot/init\n directory, without adding it to config.json. Add the catalog file name (without \n.json\n) to the URL after \n#\n. For instance, \nexample.com/terria#mycatalog\n. See \nTerriaJS URL parameters\n for more information. This method is useful when developing catalog services which are not quite ready for public access, but for showing to interested stakeholders.\n\n\nStore it anywhere on the web (on a CORS-enabled server). Add the complete URL (including \n.json\n) to the URL, after \n#\n. For instance, \nnationalmap.gov.au/#http://example.com/mycatalog.json\n. This method is useful when developing services for a Terria instance which you don't directly control, and for rapidly previewing changes which you can also share with people.\n\n\nStore it locally, then drag and drop it into the Terria window.\n\n\n\n\nIf using method 3, please note:\n\n\n\n\nFiles on Github, including Gist files, are not served with CORS. However, you can access them through a third-party service, rawgit.com. For instance, https://github.com/TerriaJS/terriajs/blob/master/wwwroot/test/init/test-tablestyle.json can be accessed as https://rawgit.com/TerriaJS/terriajs/master/wwwroot/test/init/test-tablestyle.json.\n\n\n\n\nAll catalog files, however loaded, are merged together in Terria. Any two items with the same name and place in the tree are combined. This means that if two catalog files each define a group called \"Water\", there will be only one \"Water\" group in Terria, containing the two sets of group members merged together.\n\n\nEditing catalog files\n\n\nCatalog files can be edited three ways:\n\n\n\n\nUsing a desktop text editor. Be very careful to ensure that your file is valid JSON. This is more restrictive format than simple JavaScript, for instance. You can use http://jsonlint.com/ .\n\n\nUsing a JSON-specific editor, such as http://www.jsoneditoronline.org/. This has the advantage that your file will be valid JSON.\n\n\nUsing the Terria Catalog Editor, currently available in a preview version at http://nationalmap.gov.au/editor/ . This editor is not yet considered reliable, and may cause data corruption.\n\n\n\n\nCatalog file properties\n\n\ncorsDomains\n\n\nBy default, Terria proxies all requests within TerriaJS-Server's whitelist, making the assumption that the servers do not support CORS. You can add hosts that are known to support CORS to this property to avoid proxying them.\n\n\n\"corsDomains\": [ \"myserver.gov.au\" ]\n\n\nhomeCamera\n and \ninitialCamera\n\n\nMaps have two camera positions, \nhomeCamera\n and \ninitialCamera\n. They are specified identically. All the examples here use \nhomeCamera\n, but apply equally to both.\n\n\n\n\ninitialCamera\n: the location when the map first displays\n\n\nhomeCamera\n: where the camera goes when you click the \"home\" button between the zoom-in and zoom-out buttons.\n\n\n\n\nOption 1: \nnorth\n, \nsouth\n, \neast\n, \nwest\n\n\nThe bounding box method uses \nnorth\n, \neast\n,\nsouth\n, and \nwest\n, in lat/lng decimal degrees.  The camera will be positioned\nin the centre point of those bounds, looking toward the Earth's\ncentre, zoomed back enough to see to the edges of the bounds.\n\n\nThis is the only mode supported in 2D mode (Leaflet). Therefore, you should always include a bounding box, even if you also use another mode.\n\n\nhomeCamera\n: {\n    \nnorth\n: -8,\n    \neast\n: 158,\n    \nsouth\n: -45,\n    \nwest\n: 109\n}\n\n\n\n\nOption 2: \nposition\n, \ndirection\n and \nup\n\n\nThis overrides Option 1.\n\n\nYou can specify \nposition\n, \ndirection\n, and \nup\n (as well as\n\nnorth\n, \neast\n,\nsouth\n, and \nwest\n). \nposition\n, \ndirection\n and \nup\n\nneed \nx\n, \ny\n and \nz\n keys specifying locations in\n\nECEF\n metre coordinates, which\nmeans the origin is the centre of the Earth, positive Z points to\nthe north pole, positive X points toward\n\n\"Null Island\"\n where the\nequator intersects with 0 degrees longitude, and positive Y points at\n(0, 90E) -- which is in the Indian Ocean south of the Bay of Bengal.\n\n\n\n\nposition\n: where the camera is\n\n\ndirection\n: where the camera is looking\n\n\nup\n: which way is \"up\", which determines how the camera is rotated\n\n\n\n\nFor most purposed positioning this way is difficult for normal\nhumans. To see an example, move the camera to some location, click the \"share\" button (and choose to not use the\nURL shortner), then URL-decode the URL you get.\n\n\nhomeCamera\n: {\n    \nwest\n: 105.51019777628066,\n    \nsouth\n: -39.61110094535454,\n    \neast\n: 161.48980219597954,\n    \nnorth\n: -9.09249015267353,\n    \nposition\n: {\n        \nx\n: -6685409.955422118,\n        \ny\n: 7044952.140379313,\n        \nz\n: -4828130.30167422\n    },\n    \ndirection\n: {\n        \nx\n: 0.6155666547559182,\n        \ny\n: -0.6486719065674744,\n        \nz\n: 0.4475516184561574\n    },\n    \nup\n: {\n        \nx\n: -0.30807420442344124,\n        \ny\n: 0.3246424737331665,\n        \nz\n: 0.8942580996654569\n    }\n}\n\n\n\n\nOption 3: \npositionHeading\n (like an aircraft)\n\n\nSetting \npositionHeading\n is useful for when you're showing a view from an aircraft or\nsatellite, and overrides Options 1 and 2.\n\n\nIt has the following attributes:\n\n\n\n\ncameraLongitude\n: longitude of camera\n\n\ncameraLatitude\n: latitude of camera\n\n\ncameraHeight\n: height of camera above earth's surface, probably in metres\n\n\nheading\n: in degrees clockwise from north (90 is east)\n\n\npitch\n: how much the camera is tilted, in degrees down from horizontal (-90 is straight down)\n\n\nroll\n: how much the camera is rotated left or right, in degrees\n\n\n\n\nhomeCamera\n: {\n    \npositionHeading\n: {\n        \ncameraLongitude\n: 145,\n        \ncameraLatitude\n: -37,\n        \ncameraHeight\n: 1000,\n        \nheading\n: 0,\n        \npitch\n: -70,\n        \nroll\n: 0,\n    }\n}\n\n\n\n\nOption 4: \nlookAt\n (a feature)\n\n\nlookAt\n is probably the most useful one for showing a feature on the\nmap, and overrides Options 1, 2, and 3.\n\n\nIt has these attributes:\n\n\n\n\ntargetLongitude\n:\n\n\ntargetLatitude\n:\n\n\ntargetHeight\n:, in metres from sealevel (positive is up)\n\n\nheading\n: in degrees clockwise from north\n\n\npitch\n: in degrees down from horizontal (so negative values mean you're looking at the sky)\n\n\nrange\n: in metres from the thing you're looking at\n\n\n\n\nhomeCamera\n: {\n    \nlookAt\n: {\n        \ntargetLongitude\n: 145,\n        \ntargetLatitude\n: 37,\n        \ntargetHeight\n: 0,\n        \nheading\n: 0,\n        \npitch\n: -90,\n        \nrange\n: 1000,\n    }\n}", 
            "title": "Initialization File"
        }, 
        {
            "location": "/CatalogManagement/Initialization-File/#catalog-init-files", 
            "text": "A catalog in Terria is defined in one or more catalog files (also known as \"init files\"). Each is a  JSON file  with this basic structure:  {\n     catalog : [\n        {\n             type :  group ,\n             name :  My group ,\n             items : [\n            ...\n            ]\n        },\n        ...\n    ],\n     homeCamera : {\n         north : -8,\n         east : 158,\n         south : -45,\n         west : 109\n    },\n     initialCamera : { ... },\n     corsDomains : [  myserver.gov.au  ]\n}  Key points:   catalog  is an array  Every element of that array must have a  type  (corresponding to a value recognised by TerriaJS) and a  name  The three major categories of catalog member types are:  group : a manually defined grouping of layers  item types such as  geojson ,  wms ,  wfs  and  esri-mapServer , which refer to one single layer  group types such as  ckan ,  wms-getCapabilities  and  esri-mapServer-group     Most of the other properties of each layer depend on the specific type. We're working on generating documentation for each type. Meanwhile, you can look at the source code in Terria's  /Models  folder.", 
            "title": "Catalog (init) files"
        }, 
        {
            "location": "/CatalogManagement/Initialization-File/#using-a-catalog-file", 
            "text": "There are four ways to load a catalog file into Terria:   Store it in Terria's  wwwroot/init  directory, and refer to it in the  initializationUrls  section of the  config.json  file. It is loaded automatically when you visit the webpage.  Store it in Terria's  wwwroot/init  directory, without adding it to config.json. Add the catalog file name (without  .json ) to the URL after  # . For instance,  example.com/terria#mycatalog . See  TerriaJS URL parameters  for more information. This method is useful when developing catalog services which are not quite ready for public access, but for showing to interested stakeholders.  Store it anywhere on the web (on a CORS-enabled server). Add the complete URL (including  .json ) to the URL, after  # . For instance,  nationalmap.gov.au/#http://example.com/mycatalog.json . This method is useful when developing services for a Terria instance which you don't directly control, and for rapidly previewing changes which you can also share with people.  Store it locally, then drag and drop it into the Terria window.   If using method 3, please note:   Files on Github, including Gist files, are not served with CORS. However, you can access them through a third-party service, rawgit.com. For instance, https://github.com/TerriaJS/terriajs/blob/master/wwwroot/test/init/test-tablestyle.json can be accessed as https://rawgit.com/TerriaJS/terriajs/master/wwwroot/test/init/test-tablestyle.json.   All catalog files, however loaded, are merged together in Terria. Any two items with the same name and place in the tree are combined. This means that if two catalog files each define a group called \"Water\", there will be only one \"Water\" group in Terria, containing the two sets of group members merged together.", 
            "title": "Using a catalog file"
        }, 
        {
            "location": "/CatalogManagement/Initialization-File/#editing-catalog-files", 
            "text": "Catalog files can be edited three ways:   Using a desktop text editor. Be very careful to ensure that your file is valid JSON. This is more restrictive format than simple JavaScript, for instance. You can use http://jsonlint.com/ .  Using a JSON-specific editor, such as http://www.jsoneditoronline.org/. This has the advantage that your file will be valid JSON.  Using the Terria Catalog Editor, currently available in a preview version at http://nationalmap.gov.au/editor/ . This editor is not yet considered reliable, and may cause data corruption.", 
            "title": "Editing catalog files"
        }, 
        {
            "location": "/CatalogManagement/Initialization-File/#catalog-file-properties", 
            "text": "", 
            "title": "Catalog file properties"
        }, 
        {
            "location": "/CatalogManagement/Initialization-File/#corsdomains", 
            "text": "By default, Terria proxies all requests within TerriaJS-Server's whitelist, making the assumption that the servers do not support CORS. You can add hosts that are known to support CORS to this property to avoid proxying them.  \"corsDomains\": [ \"myserver.gov.au\" ]", 
            "title": "corsDomains"
        }, 
        {
            "location": "/CatalogManagement/Initialization-File/#homecamera-and-initialcamera", 
            "text": "Maps have two camera positions,  homeCamera  and  initialCamera . They are specified identically. All the examples here use  homeCamera , but apply equally to both.   initialCamera : the location when the map first displays  homeCamera : where the camera goes when you click the \"home\" button between the zoom-in and zoom-out buttons.", 
            "title": "homeCamera and initialCamera"
        }, 
        {
            "location": "/CatalogManagement/Initialization-File/#option-1-north-south-east-west", 
            "text": "The bounding box method uses  north ,  east , south , and  west , in lat/lng decimal degrees.  The camera will be positioned\nin the centre point of those bounds, looking toward the Earth's\ncentre, zoomed back enough to see to the edges of the bounds.  This is the only mode supported in 2D mode (Leaflet). Therefore, you should always include a bounding box, even if you also use another mode.  homeCamera : {\n     north : -8,\n     east : 158,\n     south : -45,\n     west : 109\n}", 
            "title": "Option 1: north, south, east, west"
        }, 
        {
            "location": "/CatalogManagement/Initialization-File/#option-2-position-direction-and-up", 
            "text": "This overrides Option 1.  You can specify  position ,  direction , and  up  (as well as north ,  east , south , and  west ).  position ,  direction  and  up \nneed  x ,  y  and  z  keys specifying locations in ECEF  metre coordinates, which\nmeans the origin is the centre of the Earth, positive Z points to\nthe north pole, positive X points toward \"Null Island\"  where the\nequator intersects with 0 degrees longitude, and positive Y points at\n(0, 90E) -- which is in the Indian Ocean south of the Bay of Bengal.   position : where the camera is  direction : where the camera is looking  up : which way is \"up\", which determines how the camera is rotated   For most purposed positioning this way is difficult for normal\nhumans. To see an example, move the camera to some location, click the \"share\" button (and choose to not use the\nURL shortner), then URL-decode the URL you get.  homeCamera : {\n     west : 105.51019777628066,\n     south : -39.61110094535454,\n     east : 161.48980219597954,\n     north : -9.09249015267353,\n     position : {\n         x : -6685409.955422118,\n         y : 7044952.140379313,\n         z : -4828130.30167422\n    },\n     direction : {\n         x : 0.6155666547559182,\n         y : -0.6486719065674744,\n         z : 0.4475516184561574\n    },\n     up : {\n         x : -0.30807420442344124,\n         y : 0.3246424737331665,\n         z : 0.8942580996654569\n    }\n}", 
            "title": "Option 2: position, direction and up"
        }, 
        {
            "location": "/CatalogManagement/Initialization-File/#option-3-positionheading-like-an-aircraft", 
            "text": "Setting  positionHeading  is useful for when you're showing a view from an aircraft or\nsatellite, and overrides Options 1 and 2.  It has the following attributes:   cameraLongitude : longitude of camera  cameraLatitude : latitude of camera  cameraHeight : height of camera above earth's surface, probably in metres  heading : in degrees clockwise from north (90 is east)  pitch : how much the camera is tilted, in degrees down from horizontal (-90 is straight down)  roll : how much the camera is rotated left or right, in degrees   homeCamera : {\n     positionHeading : {\n         cameraLongitude : 145,\n         cameraLatitude : -37,\n         cameraHeight : 1000,\n         heading : 0,\n         pitch : -70,\n         roll : 0,\n    }\n}", 
            "title": "Option 3: positionHeading (like an aircraft)"
        }, 
        {
            "location": "/CatalogManagement/Initialization-File/#option-4-lookat-a-feature", 
            "text": "lookAt  is probably the most useful one for showing a feature on the\nmap, and overrides Options 1, 2, and 3.  It has these attributes:   targetLongitude :  targetLatitude :  targetHeight :, in metres from sealevel (positive is up)  heading : in degrees clockwise from north  pitch : in degrees down from horizontal (so negative values mean you're looking at the sky)  range : in metres from the thing you're looking at   homeCamera : {\n     lookAt : {\n         targetLongitude : 145,\n         targetLatitude : 37,\n         targetHeight : 0,\n         heading : 0,\n         pitch : -90,\n         range : 1000,\n    }\n}", 
            "title": "Option 4: lookAt (a feature)"
        }, 
        {
            "location": "/CatalogManagement/Format-Conversion-Service/", 
            "text": "Certain file formats that are not directly supported by TerriaJS can be converted using a server-side conversion service, implemented by \nTerriaJS Server\n.\n\n\nAny \nfile format supported by the OGR suite\n (part of the GDAL spatial conversion library) is indirectly supported by first uploading it through an online conversion process. There are several limitations:\n\n\n\n\nthe user must choose to allow this to happen\n\n\nfiles must be under 1MB\n\n\nthe overall user experience is slower and less engaging than for natively supported file types\n\n\n\n\nIt is in general much better to convert files to a directly supported type, such as GeoJSON.", 
            "title": "Format Conversion Service"
        }, 
        {
            "location": "/Customizing/", 
            "text": "Customizing Terria\n\n\nThese guides cover configuring, skinning and tweaking Terria. You'll need some basic sysadmin or development skills for most tasks. Some of these tricks you can use on any public Terria site.\n\n\nFirst, read \nDeployment\n to get up and running.\n\n\nConfiguring\n\n\n\n\n\n\n\n\nLocation\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nwwwroot/config.json\n\n\nConfig.json\n: Client-side configuration. Configures catalog (init) files to load, attribution, keys for Bing Maps and Google Analytics, the name of your application.\n\n\n\n\n\n\nwwwroot/terria.json\n\n\nA sample \ncatalog (init) file\n. You can add new datasets here.\n\n\n\n\n\n\ndevserverconfig.json\n\n\nServer-side configuration for \nTerria Server\n. Configures which domains the server will proxy for, and special locations of init files.\n\n\n\n\n\n\nindex.js\n\n\nThe \nindex.js\n is an entry point for Terria Map. Some \"configuration-like\" aspects are controlled through JavaScript in this file, such as the choices of base map. We try to progressively move these into the above files.\n\n\n\n\n\n\n\n\n\n\nHow to skin a Terria Map\n\n\nTerriaJS URL parameters\n\n\nTerriaJS WPS parameters\n\n\nHow to control TerriaJS through an \niframe\n\n\nExtending TerriaJS\n: A guide for developers wanting to add new features such as new catalog item types, or otherwise modify Terria behaviour.\n\n\nCKAN previewer\n\n\n\n\nOther tools and info:\n\n\n\n\nMake your own map without writing code\n\n\nManage a data catalogue\n.\n\n\nYou can create a simple custom map by creating a spreadsheet with data and dragging it on to the NationalMap.  The spreadsheet must have a column with spatial information (eg a postcode or statistical region identifier) or columns for latitude and longitude.  See the [[CSV-geo-au]] guideline for more information about what spatial data is supported.", 
            "title": "Overview"
        }, 
        {
            "location": "/Customizing/#customizing-terria", 
            "text": "These guides cover configuring, skinning and tweaking Terria. You'll need some basic sysadmin or development skills for most tasks. Some of these tricks you can use on any public Terria site.  First, read  Deployment  to get up and running.", 
            "title": "Customizing Terria"
        }, 
        {
            "location": "/Customizing/#configuring", 
            "text": "Location  Purpose      wwwroot/config.json  Config.json : Client-side configuration. Configures catalog (init) files to load, attribution, keys for Bing Maps and Google Analytics, the name of your application.    wwwroot/terria.json  A sample  catalog (init) file . You can add new datasets here.    devserverconfig.json  Server-side configuration for  Terria Server . Configures which domains the server will proxy for, and special locations of init files.    index.js  The  index.js  is an entry point for Terria Map. Some \"configuration-like\" aspects are controlled through JavaScript in this file, such as the choices of base map. We try to progressively move these into the above files.      How to skin a Terria Map  TerriaJS URL parameters  TerriaJS WPS parameters  How to control TerriaJS through an  iframe  Extending TerriaJS : A guide for developers wanting to add new features such as new catalog item types, or otherwise modify Terria behaviour.  CKAN previewer   Other tools and info:   Make your own map without writing code  Manage a data catalogue .  You can create a simple custom map by creating a spreadsheet with data and dragging it on to the NationalMap.  The spreadsheet must have a column with spatial information (eg a postcode or statistical region identifier) or columns for latitude and longitude.  See the [[CSV-geo-au]] guideline for more information about what spatial data is supported.", 
            "title": "Configuring"
        }, 
        {
            "location": "/Customizing/Config-JSON/", 
            "text": "Config.json\n\n\nThe file \nwwwroot/config.json\n contains client-side configuration parameters.\n\n\nIt has this structure:\n\n\n{\n    \ninitializationUrls\n : [\n        \nmyinitfile\n,\n        \nanotherinitfile\n\n    ],\n    \nparameters\n: {\n        \nbinMapsKey\n: \n...\n,\n        ...\n    }\n}\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n\"initializationUrls\"\n\n\nEach string \n\"foo\"\n refers to a catalog (init) file found at \n/wwwroot/init/foo.json\n. These define all the datasets that will be loaded into the catalog. See \nInitialization File\n.\n\n\n\n\n\n\n\"parameters\": {\n\n\nKey value pairs that configure Terria, as follows.\n\n\n\n\n\n\n\"bingMapsKey\"\n\n\nA \nBing Maps API key\n used for requesting Bing Maps base maps and using the Bing Maps geocoder for searching. It is your responsibility to request a key and comply with all terms and conditions.\n\n\n\n\n\n\n\"googleUrlShortenerKey\"\n\n\nA Google API key for accessing the \nGoogle URL Shortener service\n. This is required in order to generate short URLs on the \"Share\" page.\n\n\n\n\n\n\n\"googleAnalyticsKey\"\n\n\nA Google API key for Google Analytics.\n\n\n\n\n\n\n\"googleAnalyticsOptions\"\n\n\nAdditional options that will be passed to the Google Analytics call.\n\n\n\n\n\n\n\"disclaimer\": {\n\"text\": \"\",\n\"url\": \"\"\n}\n\n\nThis text will be displayed prominently at the bottom of the map, with a clickable link to the URL.\n\n\n\n\n\n\n\"developerAttribution\": {\n\"text\": \"Your organisation\",\n\"link\": \"http://www.example.com\"\n}\n\n\nThis text is displayed somewhat less prominently at the bottom of the map.\n\n\n\n\n\n\n\"appName\"\n\n\nThis title serves as the HTML \ntitle\n of the page and in various user text.\n\n\n\n\n\n\n\"supportEmail\"\n\n\nThe email address shown when things go wrong.\n\n\n\n\n\n\n\"brandBarElements\": [ ]\n\n\nAn array of HTML strings that fill up the top left logo space.\n\n\n\n\n\n\n\"defaultMaximumShownFeatureInfos\"\n\n\nThe maximum number of \"feature info\" boxes that can be displayed when clicking a point. (Default: 100)\n\n\n\n\n\n\n\n\nAdvanced options\n\n\nThese options only need to be changed in unusual deployments. They define the URLs that are accessed for certain additional services, so must be changed if deploying as a static site, for instance.\n\n\n\n\n\n\n\n\nOption\n\n\nMeaning\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\n\"regionMappingDefinitionsUrl\"\n\n\nLocation of the JSON file that defines region mapping for CSV files.\n\n\ndata/regionMapping.json\n\n\n\n\n\n\n\"conversionServiceBaseUrl\"\n\n\nLocation of OGR2OGR conversion service (part of TerriaJS-Server).\n\n\nconvert/\n\n\n\n\n\n\n\"proj4ServiceBaseUrl\"\n\n\nLocation of Proj4 projection lookup service (part of TerriaJS-Server)\n\n\nproj4/\n\n\n\n\n\n\n\"corsProxyBaseUrl\"\n\n\nLocation of CORS proxy service (part of TerriaJS-Server)\n\n\nproxy/\n\n\n\n\n\n\n\"proxyableDomainsUrl\"\n\n\nLocation of list of domains which the CORS proxy service will allow to be proxied.\n\n\nproxyabledomains/", 
            "title": "Config JSON"
        }, 
        {
            "location": "/Customizing/Config-JSON/#configjson", 
            "text": "The file  wwwroot/config.json  contains client-side configuration parameters.  It has this structure:  {\n     initializationUrls  : [\n         myinitfile ,\n         anotherinitfile \n    ],\n     parameters : {\n         binMapsKey :  ... ,\n        ...\n    }\n}     Option  Meaning      \"initializationUrls\"  Each string  \"foo\"  refers to a catalog (init) file found at  /wwwroot/init/foo.json . These define all the datasets that will be loaded into the catalog. See  Initialization File .    \"parameters\": {  Key value pairs that configure Terria, as follows.    \"bingMapsKey\"  A  Bing Maps API key  used for requesting Bing Maps base maps and using the Bing Maps geocoder for searching. It is your responsibility to request a key and comply with all terms and conditions.    \"googleUrlShortenerKey\"  A Google API key for accessing the  Google URL Shortener service . This is required in order to generate short URLs on the \"Share\" page.    \"googleAnalyticsKey\"  A Google API key for Google Analytics.    \"googleAnalyticsOptions\"  Additional options that will be passed to the Google Analytics call.    \"disclaimer\": { \"text\": \"\", \"url\": \"\" }  This text will be displayed prominently at the bottom of the map, with a clickable link to the URL.    \"developerAttribution\": { \"text\": \"Your organisation\", \"link\": \"http://www.example.com\" }  This text is displayed somewhat less prominently at the bottom of the map.    \"appName\"  This title serves as the HTML  title  of the page and in various user text.    \"supportEmail\"  The email address shown when things go wrong.    \"brandBarElements\": [ ]  An array of HTML strings that fill up the top left logo space.    \"defaultMaximumShownFeatureInfos\"  The maximum number of \"feature info\" boxes that can be displayed when clicking a point. (Default: 100)", 
            "title": "Config.json"
        }, 
        {
            "location": "/Customizing/Config-JSON/#advanced-options", 
            "text": "These options only need to be changed in unusual deployments. They define the URLs that are accessed for certain additional services, so must be changed if deploying as a static site, for instance.     Option  Meaning  Default      \"regionMappingDefinitionsUrl\"  Location of the JSON file that defines region mapping for CSV files.  data/regionMapping.json    \"conversionServiceBaseUrl\"  Location of OGR2OGR conversion service (part of TerriaJS-Server).  convert/    \"proj4ServiceBaseUrl\"  Location of Proj4 projection lookup service (part of TerriaJS-Server)  proj4/    \"corsProxyBaseUrl\"  Location of CORS proxy service (part of TerriaJS-Server)  proxy/    \"proxyableDomainsUrl\"  Location of list of domains which the CORS proxy service will allow to be proxied.  proxyabledomains/", 
            "title": "Advanced options"
        }, 
        {
            "location": "/Customizing/How-to-skin-a-Terria-Map/", 
            "text": "How to skin a Terria Map\n\n\nAfter deploying and building, you will want to make some changes to make various labels and logos visually identify your project.\n\n\nindex.js\n\n\nWarning: this section is out of date!\n\n\nvar terria = new Terria({\n    appName: 'My first TerriaMap',\n    supportEmail: 'nospam@example.com',\n\n\n\n\nterria.appName\n is used in many places, such as dialog prompts.\n\n\n     BrandBarViewModel.create({\n         container: ui,\n         elements: [\n            '\na target=\n_blank\n href=\nabout.html\nimg src=\nimages/NationalMap_Logo_RGB72dpi_REV_Blue text_BETA.png\n height=\n50\n alt=\nNational Map\n title=\nVersion: ' + version + '\n /\n/a\n',\n            '\na target=\n_blank\n href=\nhttp://www.gov.au/\nimg src=\nimages/AG-Rvsd-Stacked-Press.png\n height=\n45\n alt=\nAustralian Government\n /\n/a\n'\n\n\n\n\nThis controls the banner at the top of the left hand pane. The last item is right-aligned. Logos should generally go in \nwwwroot/images\n. Use \nspan class=\"brand-bar-name\"\n for text without a logo.\n\n\ntitle\nMy first Terria Map\n/title\n\n\nCatalog\n\n\n\n\nCreate a new catalog file, \"myproject.json\" in \nwwwroot/init\n\n\nModify config.json:\n\n\n\n\n    \ninitializationUrls\n : [\n        \nmyproject\n\n    ],\n\n\n\n\nStyling\n\n\nAdd override styles to \nindex.less\n.\n\n\nBuild\n\n\nRun \ngulp watch\n to continually rebuild in response to your changes.", 
            "title": "Skinning"
        }, 
        {
            "location": "/Customizing/How-to-skin-a-Terria-Map/#how-to-skin-a-terria-map", 
            "text": "After deploying and building, you will want to make some changes to make various labels and logos visually identify your project.", 
            "title": "How to skin a Terria Map"
        }, 
        {
            "location": "/Customizing/How-to-skin-a-Terria-Map/#indexjs", 
            "text": "Warning: this section is out of date!  var terria = new Terria({\n    appName: 'My first TerriaMap',\n    supportEmail: 'nospam@example.com',  terria.appName  is used in many places, such as dialog prompts.       BrandBarViewModel.create({\n         container: ui,\n         elements: [\n            ' a target= _blank  href= about.html img src= images/NationalMap_Logo_RGB72dpi_REV_Blue text_BETA.png  height= 50  alt= National Map  title= Version: ' + version + '  / /a ',\n            ' a target= _blank  href= http://www.gov.au/ img src= images/AG-Rvsd-Stacked-Press.png  height= 45  alt= Australian Government  / /a '  This controls the banner at the top of the left hand pane. The last item is right-aligned. Logos should generally go in  wwwroot/images . Use  span class=\"brand-bar-name\"  for text without a logo.  title My first Terria Map /title", 
            "title": "index.js"
        }, 
        {
            "location": "/Customizing/How-to-skin-a-Terria-Map/#catalog", 
            "text": "Create a new catalog file, \"myproject.json\" in  wwwroot/init  Modify config.json:        initializationUrls  : [\n         myproject \n    ],", 
            "title": "Catalog"
        }, 
        {
            "location": "/Customizing/How-to-skin-a-Terria-Map/#styling", 
            "text": "Add override styles to  index.less .", 
            "title": "Styling"
        }, 
        {
            "location": "/Customizing/How-to-skin-a-Terria-Map/#build", 
            "text": "Run  gulp watch  to continually rebuild in response to your changes.", 
            "title": "Build"
        }, 
        {
            "location": "/Customizing/TerriaJS-URL-parameters/", 
            "text": "Many aspects of TerriaJS (and hence NationalMap) can be configured by the end user by passing URL parameters. Combine them like this: \n\n\n\n\nThe base URL, then a \n#\n\n\nThen the first parameter\n\n\nThen repeatedly: a \n, and the next parameter\n\n\n\n\nFor example: \nnationalmap.gov.au#test\nmap=2d\n\n\nDisplay parameters\n\n\n\n\n\n\n\n\nParameter\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nclean\n\n\nDon't load the default catalog files for this site.\n\n\n\n\n\n\nmap=2d\n\n\nUse the 2D (Leaflet) map instead of the default.\n\n\n\n\n\n\nmap=3d\n\n\nUse the 3D (Cesium) map instead of the default.\n\n\n\n\n\n\nhideExplorerPanel=1\n\n\nCollapse the catalog (left side) panel, useful for embedding.\n\n\n\n\n\n\nmode=preview\n\n\nOperate in \"preview mode\", which mostly means not showing a warning if the screen is \nsmall\n\n\n\n\n\n\nshare=\n...\n\n\nLoad a map view previously saved using the \"Share\" function with URL shortening.\n\n\n\n\n\n\nstart=\n...\n\n\nLoad a map view previously saved without URL shortening. The argument is a URL-encoded JSON structure defined using an internal format described below.\n\n\n\n\n\n\n\\\ninitfile>\n\n\nLoad catalog file as described below.\n\n\n\n\n\n\ntools=1\n\n\nEnable the secret tools panel (an additional button at the top), which has features like timing the response times of WMS layers and exporting the current view as JSON.\n\n\n\n\n\n\n\n\nCatalog files (init files)\n\n\nAny unrecognised parameter (eg \nfoo\n) is treated as the name of a catalog file, loaded from the directory \nwwwroot/init/foo.json\n). Multiple catalog files can be loaded this way, and will be combined. Later files can override earlier ones.\n\n\nExample: http://nationalmap.gov.au#test\n\n\nStart data\n\n\nThe \nstart=\n parameter essentially embeds an entire catalog file in the URL. The format is:\n\n\n{\n    \nversion\n: \n0.0.05\n,\n    \ninitSources\n: [\n        \ninit/nm.json\n,\n        \ninit/test.json\n,\n        ...\n        {\n            \ncatalog\n: [\n            ...\n            ]\n        },\n        {\n            \ninitialCamera\n: {\n                \nwest\n: \nlon\n,\n                \nsouth\n: \nlat\n,\n                \neast\n: \nlon\n,\n                \nnorth\n: \nlat\n,\n                \nposition\n: {\n                    \nx\n: ...,\n                    \ny\n: ...,\n                    \nz\n: ...\n                },\n                \ndirection\n: {\n                    \nx\n: ...,\n                    \ny\n: ...,\n                    \nz\n: ...\n                },\n                \nup\n: {\n                    \nx\n: ...,\n                    \ny\n: ...,\n                    \nz\n: ...\n                }\n            },\n            \nhomeCamera\n: {\n                \nwest\n: ...,\n                \nsouth\n: ...,\n                \neast\n: ...,\n                \nnorth\n: -...\n            },\n            \nbaseMapName\n: \nPositron (Light)\n,\n            \nviewerMode\n: \n3d\n\n        }\n    ]\n    }\n}\n\n\n\n\nThe exact structure changes as features are added. The best way to understand it is:\n\n\n\n\nAdjust the view as desired\n\n\nGenerate a share link\n\n\nURL-decode the share link (using a tool \nsuch as this\n).", 
            "title": "URL Parameters"
        }, 
        {
            "location": "/Customizing/TerriaJS-URL-parameters/#display-parameters", 
            "text": "Parameter  Meaning      clean  Don't load the default catalog files for this site.    map=2d  Use the 2D (Leaflet) map instead of the default.    map=3d  Use the 3D (Cesium) map instead of the default.    hideExplorerPanel=1  Collapse the catalog (left side) panel, useful for embedding.    mode=preview  Operate in \"preview mode\", which mostly means not showing a warning if the screen is  small    share= ...  Load a map view previously saved using the \"Share\" function with URL shortening.    start= ...  Load a map view previously saved without URL shortening. The argument is a URL-encoded JSON structure defined using an internal format described below.    \\ initfile>  Load catalog file as described below.    tools=1  Enable the secret tools panel (an additional button at the top), which has features like timing the response times of WMS layers and exporting the current view as JSON.", 
            "title": "Display parameters"
        }, 
        {
            "location": "/Customizing/TerriaJS-URL-parameters/#catalog-files-init-files", 
            "text": "Any unrecognised parameter (eg  foo ) is treated as the name of a catalog file, loaded from the directory  wwwroot/init/foo.json ). Multiple catalog files can be loaded this way, and will be combined. Later files can override earlier ones.  Example: http://nationalmap.gov.au#test", 
            "title": "Catalog files (init files)"
        }, 
        {
            "location": "/Customizing/TerriaJS-URL-parameters/#start-data", 
            "text": "The  start=  parameter essentially embeds an entire catalog file in the URL. The format is:  {\n     version :  0.0.05 ,\n     initSources : [\n         init/nm.json ,\n         init/test.json ,\n        ...\n        {\n             catalog : [\n            ...\n            ]\n        },\n        {\n             initialCamera : {\n                 west :  lon ,\n                 south :  lat ,\n                 east :  lon ,\n                 north :  lat ,\n                 position : {\n                     x : ...,\n                     y : ...,\n                     z : ...\n                },\n                 direction : {\n                     x : ...,\n                     y : ...,\n                     z : ...\n                },\n                 up : {\n                     x : ...,\n                     y : ...,\n                     z : ...\n                }\n            },\n             homeCamera : {\n                 west : ...,\n                 south : ...,\n                 east : ...,\n                 north : -...\n            },\n             baseMapName :  Positron (Light) ,\n             viewerMode :  3d \n        }\n    ]\n    }\n}  The exact structure changes as features are added. The best way to understand it is:   Adjust the view as desired  Generate a share link  URL-decode the share link (using a tool  such as this ).", 
            "title": "Start data"
        }, 
        {
            "location": "/Customizing/TerriaJS-in-iframe/", 
            "text": "Controlling TerriaJS through an \niframe\n\n\nTerriaJS can be configured to accept messages posted to it by its parent window.  This is useful when embedding a TerriaJS app in an iframe and when the parent wants to send more data to the embedded app than can be reasonably included in a URL.\n\n\nClick \nhere\n to see a demo, which also sizes the iframe to fill the available space.\n\n\nFirst, the TerriaJS app must include a line like this:\n\n\nupdateApplicationOnMessageFromParentWindow(terria, window);\n\n\n\n\nThen, the parent window can send messages like this:\n\n\n!DOCTYPE html\n\n\nhtml lang=\nen\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \ntitle\nNationalMap Embed Test\n/title\n\n\n/head\n\n\n\nbody\n\n    \niframe id=\nembeddedNationalMap\n src=\nhttp://nationalmap.gov.au\n width=\n1024\n height=\n768\n/iframe\n\n\n    \nscript type=\ntext/javascript\n\n        window.addEventListener('message', function(e) {\n            var iframeWindow = document.getElementById('embeddedNationalMap').contentWindow;\n            if (e.source === iframeWindow \n e.data === 'ready') {\n                // NationalMap is ready to receive messages!\n                iframeWindow.postMessage({\n                    initSources: [\n                        {\n                            initialCamera: {\n                                \nnorth\n: -33.827,\n                                \neast\n: 151.249,\n                                \nsouth\n: -33.907,\n                                \nwest\n: 151.165\n                            },\n                            catalog: [\n                                {\n                                    type: \ngroup\n,\n                                    name: \nFoo\n,\n                                    isPromoted: true,\n                                    isOpen: true,\n                                    items: [\n                                        {\n                                            type: \ncsv\n,\n                                            name: \nMy Data\n,\n                                            data: \nPOA,Some Value\\n2000,1\\n2205,2\n,\n                                            isEnabled: true\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }, 'http://nationalmap.gov.au');\n            }\n        });\n    \n/script\n\n\n/body\n\n\n/html\n\n\n\n\n\nNotice that parent is creating a CSV catalog item with embedded data.  The CSV is only two lines in this case, but in a real application it could be large, much larger than could fit in a URL.", 
            "title": "Controlling in an iframe"
        }, 
        {
            "location": "/Customizing/TerriaJS-in-iframe/#controlling-terriajs-through-an-iframe", 
            "text": "TerriaJS can be configured to accept messages posted to it by its parent window.  This is useful when embedding a TerriaJS app in an iframe and when the parent wants to send more data to the embedded app than can be reasonably included in a URL.  Click  here  to see a demo, which also sizes the iframe to fill the available space.  First, the TerriaJS app must include a line like this:  updateApplicationOnMessageFromParentWindow(terria, window);  Then, the parent window can send messages like this:  !DOCTYPE html  html lang= en  head \n     meta charset= utf-8 \n     title NationalMap Embed Test /title  /head  body \n     iframe id= embeddedNationalMap  src= http://nationalmap.gov.au  width= 1024  height= 768 /iframe \n\n     script type= text/javascript \n        window.addEventListener('message', function(e) {\n            var iframeWindow = document.getElementById('embeddedNationalMap').contentWindow;\n            if (e.source === iframeWindow   e.data === 'ready') {\n                // NationalMap is ready to receive messages!\n                iframeWindow.postMessage({\n                    initSources: [\n                        {\n                            initialCamera: {\n                                 north : -33.827,\n                                 east : 151.249,\n                                 south : -33.907,\n                                 west : 151.165\n                            },\n                            catalog: [\n                                {\n                                    type:  group ,\n                                    name:  Foo ,\n                                    isPromoted: true,\n                                    isOpen: true,\n                                    items: [\n                                        {\n                                            type:  csv ,\n                                            name:  My Data ,\n                                            data:  POA,Some Value\\n2000,1\\n2205,2 ,\n                                            isEnabled: true\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }, 'http://nationalmap.gov.au');\n            }\n        });\n     /script  /body  /html   Notice that parent is creating a CSV catalog item with embedded data.  The CSV is only two lines in this case, but in a real application it could be large, much larger than could fit in a URL.", 
            "title": "Controlling TerriaJS through an &lt;iframe&gt;"
        }, 
        {
            "location": "/Customizing/Extending-TerriaJS/", 
            "text": "Extending TerriaJS\n\n\nHere are some of the common things you'll want to do to extend TerriaJS with new behaviour.\n\n\nAdd a catalog item to the initial catalog that is loaded at startup\n\n\nThe startup list of init files loaded in a TerriaJS application is specified in the \ninitializationUrls\n property in a config file, typically called \nconfig.json\n, that is passed to the \nTerria.start\n function.  If an item in \ninitializationUrls\n ends with \n.json\n, it is assumed to be a relative or absolute URL to the init file.  Otherwise, the init file URL is formed as \n'init/' + item + '.json'\n.\n\n\nTo add an item to the catalog, the easiest thing to do is to find a similar item in the list and mirror yours after that.  You can also find the complete list of catalog member \"types\" in \nregisterCatalogMembers.js\n.  The list of properties that are supported by a given catalog item type can be found in each view-model class's code (for example, \nWebMapServiceCatalogItem\n) and documentation (generated with \ngulp docs\n).\n\n\nFind a item or group in the catalog\n\n\nThe easiest way to find an item in the catalog is to use the \nfindFirstItemByName\n method on \nCatalogGroupViewModel\n:\n\n\nvar catalog = ...; // catalog is an instance of CatalogViewModel\nvar topLevelGroup = catalog.group;\nvar national = topLevelGroup.findFirstItemByName('National Data Sets');\nvar vegetation = national.findFirstItemByName('Vegetation');\n\n\n\nYou can also loop over the individual items manually as you would any Javascript array:\n\n\n// Find an item by inspecting descriptions.\nvar myItem;\nfor (var i = 0; i \n national.items.length; ++i) {\n    if (national.items[i].description.indexOf('foo') \n= 0) {\n        myItem = national.items[i];\n    }\n}\n\n\n\nEnable, disable, hide, or show a catalog item\n\n\nYou can enable a catalog item programmatically just by setting its \nisEnabled\n property.\n\n\nmyItem.isEnabled = true;\n\n\n\nThe item will be added to the Now Viewing panel and shown on the map.\n\n\nYou can hide it from the map (which will uncheck it in the Now Viewing panel but not remove it from that panel) by setting the \nisShown\n property:\n\n\nmyItem.isShown = false;\n\n\n\nYou can show or disable it in the same way:\n\n\nmyItem.isShown = true;\nmyItem.isEnabled = false;\n\n\n\nEnabling a catalog item that is already enabled but not shown will NOT cause it to be shown.\n\n\nProgrammatically add an item to the catalog\n\n\nTo programmatically add an item to the catalog, first, find the group you want to add it to:\n\n\nvar catalog = ...; // catalog is an instance of CatalogViewModel\nvar topLevelGroup = catalog.group;\nvar national = topLevelGroup.findFirstItemByName('National Data Sets');\nvar myGroup = national.findFirstItemByName('Vegetation');\n\n\n\nAs of this writing, the National Map user interface currently requires two levels of groups before an actual catalog item.  For example, you can put a catalog item under \nNational Data Sets -\n Vegetation\n but not directly under \nNational Data Sets\n.\n\n\nNext, create a new catalog item view-model of the appropriate type and set its properties.  View-models are found in \nlib/ViewModels\n and have \nItemViewModel\n in their name.  For example:\n\n\nvar newItem = new WebMapServiceItemViewModel(catalog.application);\nnewItem.name = 'An AMAZING data source!';\nnewItem.description = 'This data source is so great, I can't even describe it.';\nnewItem.url = 'http://geoserver.research.nicta.com.au/geotopo_250k/ows';\nnewItem.layers = 'AHGFMappedStream';\n\n\n\nThe reference documentation generated by running \ngulp docs\n is a good source of information about the available properties of each catalog item view-model and what they mean.\n\n\nFinally, add the new item to the group you found earlier:\n\n\nmyGroup.add(newItem);\n\n\n\nThe user interface will automatically update to show the new item.\n\n\nAdd a new type of catalog item\n\n\nYou can add a new type of catalog item by extending \nCatalogItemViewModel\n.  The existing catalog items, such as \nWebMapServiceItemViewModel\n and \nGeoJsonItemViewModel\n serve as good examples of how to do this.\n\n\nIn order for the new data source to be configurable an init file, you also need to add it to \nregisterCatalogViewModels.js\n with a unique \ntype\n identifier.\n\n\nAdd a new type of group\n\n\nIt is also possible to add custom catalog item group types.  This is done when you want part of your catalog to be built by querying a remote server.  For example, TerriaJS includes a a group type to retrieve data sources from a WMS server's \nGetCapabilities\n response.\n\n\nTo create a custom type of group, extend \nCatalogGroupViewModel\n.  \nWebMapServiceGroupViewModel.js\n serves as a good example of how to do this.\n\n\nIn order for the new group to be usable in an init file, you also need to add it to \nregisterCatalogViewModels.js\n with a unique \ntype\n identifier.\n\n\nContributing\n\n\nIf you add a new feature or item or group type that might be of use to other projects, please consider contributing it back as a pull request. See the \nContributors Guide\n.", 
            "title": "Extending TerriaJS"
        }, 
        {
            "location": "/Customizing/Extending-TerriaJS/#extending-terriajs", 
            "text": "Here are some of the common things you'll want to do to extend TerriaJS with new behaviour.", 
            "title": "Extending TerriaJS"
        }, 
        {
            "location": "/Customizing/Extending-TerriaJS/#add-a-catalog-item-to-the-initial-catalog-that-is-loaded-at-startup", 
            "text": "The startup list of init files loaded in a TerriaJS application is specified in the  initializationUrls  property in a config file, typically called  config.json , that is passed to the  Terria.start  function.  If an item in  initializationUrls  ends with  .json , it is assumed to be a relative or absolute URL to the init file.  Otherwise, the init file URL is formed as  'init/' + item + '.json' .  To add an item to the catalog, the easiest thing to do is to find a similar item in the list and mirror yours after that.  You can also find the complete list of catalog member \"types\" in  registerCatalogMembers.js .  The list of properties that are supported by a given catalog item type can be found in each view-model class's code (for example,  WebMapServiceCatalogItem ) and documentation (generated with  gulp docs ).", 
            "title": "Add a catalog item to the initial catalog that is loaded at startup"
        }, 
        {
            "location": "/Customizing/Extending-TerriaJS/#find-a-item-or-group-in-the-catalog", 
            "text": "The easiest way to find an item in the catalog is to use the  findFirstItemByName  method on  CatalogGroupViewModel :  var catalog = ...; // catalog is an instance of CatalogViewModel\nvar topLevelGroup = catalog.group;\nvar national = topLevelGroup.findFirstItemByName('National Data Sets');\nvar vegetation = national.findFirstItemByName('Vegetation');  You can also loop over the individual items manually as you would any Javascript array:  // Find an item by inspecting descriptions.\nvar myItem;\nfor (var i = 0; i   national.items.length; ++i) {\n    if (national.items[i].description.indexOf('foo')  = 0) {\n        myItem = national.items[i];\n    }\n}", 
            "title": "Find a item or group in the catalog"
        }, 
        {
            "location": "/Customizing/Extending-TerriaJS/#enable-disable-hide-or-show-a-catalog-item", 
            "text": "You can enable a catalog item programmatically just by setting its  isEnabled  property.  myItem.isEnabled = true;  The item will be added to the Now Viewing panel and shown on the map.  You can hide it from the map (which will uncheck it in the Now Viewing panel but not remove it from that panel) by setting the  isShown  property:  myItem.isShown = false;  You can show or disable it in the same way:  myItem.isShown = true;\nmyItem.isEnabled = false;  Enabling a catalog item that is already enabled but not shown will NOT cause it to be shown.", 
            "title": "Enable, disable, hide, or show a catalog item"
        }, 
        {
            "location": "/Customizing/Extending-TerriaJS/#programmatically-add-an-item-to-the-catalog", 
            "text": "To programmatically add an item to the catalog, first, find the group you want to add it to:  var catalog = ...; // catalog is an instance of CatalogViewModel\nvar topLevelGroup = catalog.group;\nvar national = topLevelGroup.findFirstItemByName('National Data Sets');\nvar myGroup = national.findFirstItemByName('Vegetation');  As of this writing, the National Map user interface currently requires two levels of groups before an actual catalog item.  For example, you can put a catalog item under  National Data Sets -  Vegetation  but not directly under  National Data Sets .  Next, create a new catalog item view-model of the appropriate type and set its properties.  View-models are found in  lib/ViewModels  and have  ItemViewModel  in their name.  For example:  var newItem = new WebMapServiceItemViewModel(catalog.application);\nnewItem.name = 'An AMAZING data source!';\nnewItem.description = 'This data source is so great, I can't even describe it.';\nnewItem.url = 'http://geoserver.research.nicta.com.au/geotopo_250k/ows';\nnewItem.layers = 'AHGFMappedStream';  The reference documentation generated by running  gulp docs  is a good source of information about the available properties of each catalog item view-model and what they mean.  Finally, add the new item to the group you found earlier:  myGroup.add(newItem);  The user interface will automatically update to show the new item.", 
            "title": "Programmatically add an item to the catalog"
        }, 
        {
            "location": "/Customizing/Extending-TerriaJS/#add-a-new-type-of-catalog-item", 
            "text": "You can add a new type of catalog item by extending  CatalogItemViewModel .  The existing catalog items, such as  WebMapServiceItemViewModel  and  GeoJsonItemViewModel  serve as good examples of how to do this.  In order for the new data source to be configurable an init file, you also need to add it to  registerCatalogViewModels.js  with a unique  type  identifier.", 
            "title": "Add a new type of catalog item"
        }, 
        {
            "location": "/Customizing/Extending-TerriaJS/#add-a-new-type-of-group", 
            "text": "It is also possible to add custom catalog item group types.  This is done when you want part of your catalog to be built by querying a remote server.  For example, TerriaJS includes a a group type to retrieve data sources from a WMS server's  GetCapabilities  response.  To create a custom type of group, extend  CatalogGroupViewModel .   WebMapServiceGroupViewModel.js  serves as a good example of how to do this.  In order for the new group to be usable in an init file, you also need to add it to  registerCatalogViewModels.js  with a unique  type  identifier.", 
            "title": "Add a new type of group"
        }, 
        {
            "location": "/Customizing/Extending-TerriaJS/#contributing", 
            "text": "If you add a new feature or item or group type that might be of use to other projects, please consider contributing it back as a pull request. See the  Contributors Guide .", 
            "title": "Contributing"
        }, 
        {
            "location": "/Customizing/CKAN-previewer/", 
            "text": "CKAN previewer\n\n\nThe CKAN previewer is a plugin for CKAN which uses TerriaJS to preview geospatial content using an iframe. It is provided in the \n/ckanext-cesiumpreview folder of TerriaMap\n.\n\n\nTo create a CKAN installation with docker\n\n\nFollow the instructions in the CKAN documentation \nhere\n\n\nTo create a CKAN installation from source\n\n\nInstall a local instance of CKAN per http://docs.ckan.org/en/ckan-2.0/install-from-source.html\nFollow all the steps :\n\n In step 1 install openjdk-7-jdk instead of openjdk-6-jdk\n\n in step 2c use requirements.txt instead of pip-requirements.txt\n\n In step 3 making 'pass' your password will makes things simpler\n\n Set up the optional Solr install as per step 5 (Single Solr instance)\n\n Step 6 can take a long time.  If it does fail drop the ckan_default database and redo step 3 and try again\n\n You do no need to set up the optional DataStore install as per step 7 \n\n\nTo add local storage of files\n\n\nsudo mkdir -p /var/lib/ckan/default\nsudo chmod 777 /var/lib/ckan/default\n\n\n\nin development.ini under storage settings add\n\n\nnano /etc/ckan/default/development.ini\nckan.storage_path = /var/lib/ckan/default\n\n\n\nAnd to run the server\n\n\n. /usr/lib/ckan/default/bin/activate\ncd /usr/lib/ckan/default/src/ckan\npaster serve /etc/ckan/default/development.ini\n\n\n\nTo install spatial extension for spatial queries and previewers, see http://docs.ckan.org/projects/ckanext-spatial/en/latest/install.html\n\n\nTo make sysadmin account\n\n\npaster sysadmin add admin -c /etc/ckan/default/development.ini\n\n\n\nTo add Cesium Previewer\n\n\nTODO: Update this to use our ckan previewer plugin.  Will require a standalone github be created for the plugin\n\n\npip install -e git+https://github.com/NICTA/nationalmap-preview#egg=cesiumpreviewer\n\n\nMake a virtual link to the viewer in CKAN to the cesiumviewer.\n\n\nln -s ~/nationalmap/ckanext-cesiumpreview/ckanext/cesiumpreview ~/ckan/lib/default/src/ckan/ckanext/cesiumpreview\n\n\n\nIn the CKAN development.ini under storage settings add the plugin\n\n\nnano /etc/ckan/default/development.ini\nckan.plugins = cesium_viewer ...\n\n\n\nThere may be a more automatic way to do this, but I'm just patching files in CKAN to handle the cesium previewer in the same way as the recline previewer.  So first open setup.py for editing.  \n\n\nnano ~/ckan/lib/default/src/ckan/setup.py\n\n\n\nAnd add the following line under the recline_preview plugin entry (line ~76)\n\n\n 'cesium_preview = ckanext.reclinepreview.plugin:CesiumPreview',\n\n\n\nThen patch entry_points.txt\n\n\n  nano ~/ckan/lib/default/src/ckan/ckan.egg-info/entry_points.txt\n\n\n\nAnd add the following line under the recline_preview plugin entry (line ~76)\n\n\n  cesium_preview = ckanext.cesiumpreview.plugin:CesiumPreview\n\n\n\nThat should be it.  The cesium previewer is pointing to the instance at nationalmap.research.nicta.com.au.  If you need to update the cesium_previewer path to a different location then edit the vis_server variable in preview_cesium.js\n\n\n  nano ~/nationalmap/cesiumpreview/theme/public/preview_cesium.js\n\n\n\nIf all went correctly you should be able to start the CKAN server in virtualenv and access the server at http://127.0.0.1:5000/", 
            "title": "CKAN Previewer"
        }, 
        {
            "location": "/Customizing/CKAN-previewer/#ckan-previewer", 
            "text": "The CKAN previewer is a plugin for CKAN which uses TerriaJS to preview geospatial content using an iframe. It is provided in the  /ckanext-cesiumpreview folder of TerriaMap .", 
            "title": "CKAN previewer"
        }, 
        {
            "location": "/Customizing/CKAN-previewer/#to-create-a-ckan-installation-with-docker", 
            "text": "Follow the instructions in the CKAN documentation  here", 
            "title": "To create a CKAN installation with docker"
        }, 
        {
            "location": "/Customizing/CKAN-previewer/#to-create-a-ckan-installation-from-source", 
            "text": "Install a local instance of CKAN per http://docs.ckan.org/en/ckan-2.0/install-from-source.html\nFollow all the steps :  In step 1 install openjdk-7-jdk instead of openjdk-6-jdk  in step 2c use requirements.txt instead of pip-requirements.txt  In step 3 making 'pass' your password will makes things simpler  Set up the optional Solr install as per step 5 (Single Solr instance)  Step 6 can take a long time.  If it does fail drop the ckan_default database and redo step 3 and try again  You do no need to set up the optional DataStore install as per step 7   To add local storage of files  sudo mkdir -p /var/lib/ckan/default\nsudo chmod 777 /var/lib/ckan/default  in development.ini under storage settings add  nano /etc/ckan/default/development.ini\nckan.storage_path = /var/lib/ckan/default  And to run the server  . /usr/lib/ckan/default/bin/activate\ncd /usr/lib/ckan/default/src/ckan\npaster serve /etc/ckan/default/development.ini  To install spatial extension for spatial queries and previewers, see http://docs.ckan.org/projects/ckanext-spatial/en/latest/install.html", 
            "title": "To create a CKAN installation from source"
        }, 
        {
            "location": "/Customizing/CKAN-previewer/#to-make-sysadmin-account", 
            "text": "paster sysadmin add admin -c /etc/ckan/default/development.ini", 
            "title": "To make sysadmin account"
        }, 
        {
            "location": "/Customizing/CKAN-previewer/#to-add-cesium-previewer", 
            "text": "TODO: Update this to use our ckan previewer plugin.  Will require a standalone github be created for the plugin  pip install -e git+https://github.com/NICTA/nationalmap-preview#egg=cesiumpreviewer  Make a virtual link to the viewer in CKAN to the cesiumviewer.  ln -s ~/nationalmap/ckanext-cesiumpreview/ckanext/cesiumpreview ~/ckan/lib/default/src/ckan/ckanext/cesiumpreview  In the CKAN development.ini under storage settings add the plugin  nano /etc/ckan/default/development.ini\nckan.plugins = cesium_viewer ...  There may be a more automatic way to do this, but I'm just patching files in CKAN to handle the cesium previewer in the same way as the recline previewer.  So first open setup.py for editing.    nano ~/ckan/lib/default/src/ckan/setup.py  And add the following line under the recline_preview plugin entry (line ~76)   'cesium_preview = ckanext.reclinepreview.plugin:CesiumPreview',  Then patch entry_points.txt    nano ~/ckan/lib/default/src/ckan/ckan.egg-info/entry_points.txt  And add the following line under the recline_preview plugin entry (line ~76)    cesium_preview = ckanext.cesiumpreview.plugin:CesiumPreview  That should be it.  The cesium previewer is pointing to the instance at nationalmap.research.nicta.com.au.  If you need to update the cesium_previewer path to a different location then edit the vis_server variable in preview_cesium.js    nano ~/nationalmap/cesiumpreview/theme/public/preview_cesium.js  If all went correctly you should be able to start the CKAN server in virtualenv and access the server at http://127.0.0.1:5000/", 
            "title": "To add Cesium Previewer"
        }, 
        {
            "location": "/Customizing/WPS-parameters-guide/", 
            "text": "Guide to WPS parameters: which UI elements they map to\n\n\nWhen developing a WPS service for TerriaJS, there are a number of inputs that are translated directly to UI widgets.\nThis table outlines how the widgets are chosen for the input parameters.\n\n\n\n\n\n\n\n\nInput type\n\n\nParameter\n\n\nWidget type\n\n\n\n\n\n\n\n\n\n\nLiteralData\n\n\nAllowedValues provided\n\n\nDropdown using values specified\n\n\n\n\n\n\nLiteralData\n\n\nAnyValue\n\n\nInput field that takes text\n\n\n\n\n\n\nComplexData\n\n\nSchema http://www.w3.org/TR/xmlschema-2/#dateTime\n\n\nDateTime widget\n\n\n\n\n\n\nComplexData\n\n\nSchema http://geojson.org/geojson-spec.html#point\n\n\nSelect point widget (will return geojson point selected)\n\n\n\n\n\n\nComplexData\n\n\nSchema http://geojson.org/geojson-spec.html#linestring\n\n\nDraw line widget (will return geojson line drawn on map)\n\n\n\n\n\n\nComplexData\n\n\nSchema http://geojson.org/geojson-spec.html#polygon\n\n\nDraw polygon widget (will return geojson polygon drawn on map)\n\n\n\n\n\n\nBoundingBoxData\n\n\n\n\nDraw rectangle widget (will return rectangle in OGC bounding box format)", 
            "title": "WPS Parameters"
        }, 
        {
            "location": "/Customizing/WPS-parameters-guide/#guide-to-wps-parameters-which-ui-elements-they-map-to", 
            "text": "When developing a WPS service for TerriaJS, there are a number of inputs that are translated directly to UI widgets.\nThis table outlines how the widgets are chosen for the input parameters.     Input type  Parameter  Widget type      LiteralData  AllowedValues provided  Dropdown using values specified    LiteralData  AnyValue  Input field that takes text    ComplexData  Schema http://www.w3.org/TR/xmlschema-2/#dateTime  DateTime widget    ComplexData  Schema http://geojson.org/geojson-spec.html#point  Select point widget (will return geojson point selected)    ComplexData  Schema http://geojson.org/geojson-spec.html#linestring  Draw line widget (will return geojson line drawn on map)    ComplexData  Schema http://geojson.org/geojson-spec.html#polygon  Draw polygon widget (will return geojson polygon drawn on map)    BoundingBoxData   Draw rectangle widget (will return rectangle in OGC bounding box format)", 
            "title": "Guide to WPS parameters: which UI elements they map to"
        }, 
        {
            "location": "/Deployment/", 
            "text": "Information for system administrators and developers\n\n\n\n\nDeploying your own Terria Map.md\n: The quick start guide.\n\n\nDeploying and building\n: The more detailed version.\n\n\nOverall system architecture\n: How the bits fit together.\n\n\nProblems and solutions\n: Go here if something bad happens.\n\n\n\n\nOnce you're up and running, see \nCustomizing\n for tweaking, configuring and skinning information.\n\n\nIn addition to deploying Terria itself, you may want to install support services:\n\n\n\n\nSetting up a region mapping server\n: to add additional region mapping types, or to avoid depending on Data61 infrastructure.\n\n\nUsing a vector tile source\n: setting up a vector tile source for region mapping. This is an experimental feature that is still in development.\n\n\nWMS Services\n: how to set up your own GeoServer to provide WMS services.", 
            "title": "Overview"
        }, 
        {
            "location": "/Deployment/#information-for-system-administrators-and-developers", 
            "text": "Deploying your own Terria Map.md : The quick start guide.  Deploying and building : The more detailed version.  Overall system architecture : How the bits fit together.  Problems and solutions : Go here if something bad happens.   Once you're up and running, see  Customizing  for tweaking, configuring and skinning information.  In addition to deploying Terria itself, you may want to install support services:   Setting up a region mapping server : to add additional region mapping types, or to avoid depending on Data61 infrastructure.  Using a vector tile source : setting up a vector tile source for region mapping. This is an experimental feature that is still in development.  WMS Services : how to set up your own GeoServer to provide WMS services.", 
            "title": "Information for system administrators and developers"
        }, 
        {
            "location": "/Deployment/Deploying-Terria-Map/", 
            "text": "Deploying a Terria Map\n\n\nIf you run into problems, check \nTerriaJS's Problems and Solutions\n.\n\n\nInstructions are given for Ubuntu. Steps will be slightly different on other platforms.\n\n\nNote: NodeJS version 0.10.x is \nnot supported\n.\n\n\n\n\n\n\n\n\nCommand\n\n\nComment\n\n\n\n\n\n\n\n\n\n\nsudo apt-get install -y git-core\n\n\nInstall Git, so you can get the code.\n\n\n\n\n\n\nsudo apt-get install -y gdal-bin\n\n\n(Optional) Install GDAL, a large geospatial conversion library used to provide server-side support for a wider range of files types.\n\n\n\n\n\n\ncurl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -\n\n\n(Required for Ubuntu) Prepare to install NodeJS, used to build Terria. The default NodeJS available with Ubuntu 14.04 is too old. On Windows, download and install the MSI from the npm web site. On Mac OS X, install it via Homebrew.\n\n\n\n\n\n\nsudo apt-get install -y nodejs npm\n\n\nInstall NodeJS (run this on all versions of Linux, including Ubuntu).\n\n\n\n\n\n\nsudo npm install -g gulp\n\n\nInstall Gulp, which is the actual build tool. Install it system-wide, as administrator (Windows 8+) or sudo (Ubuntu / Mac OS X). See also: \nInstall npm packages globally without sudo on OS X and Linux\n.\n\n\n\n\n\n\ngit clone https://github.com/TerriaJS/TerriaMap.git\n\n\nGet the code\n\n\n\n\n\n\ncd TerriaMap\n\n\n\n\n\n\n\n\nnpm install\n\n\nInstall the dependencies. This may take a while. \nTerriaJS-Server\n is installed to \nnode_modules/terriajs-server\n.\n\n\n\n\n\n\ngulp\n\n\nBuild it, using Gulp. This compiles all the code into just a couple of big JavaScript files and moves other assets into \nwwwroot/\n.\n\n\n\n\n\n\nnpm start\n\n\nStart the server.\n\n\n\n\n\n\n\n\nYou can access your instance at [[http://localhost:3001]] in a web browser.\n\n\nThe condensed form of all of the above:\n\n\nsudo apt-get install -y git-core gdal-bin nodejs-legacy npm \n sudo npm install -g gulp\ngit clone https://github.com/TerriaJS/TerriaMap.git \n cd TerriaMap \n npm install\ngulp\nnpm start\n\n\n\n\nMaking changes\n\n\nWant to start tweaking? Proceed to \nCustomizing Terria\n.", 
            "title": "Deploying TerriaMap"
        }, 
        {
            "location": "/Deployment/Deploying-Terria-Map/#deploying-a-terria-map", 
            "text": "If you run into problems, check  TerriaJS's Problems and Solutions .  Instructions are given for Ubuntu. Steps will be slightly different on other platforms.  Note: NodeJS version 0.10.x is  not supported .     Command  Comment      sudo apt-get install -y git-core  Install Git, so you can get the code.    sudo apt-get install -y gdal-bin  (Optional) Install GDAL, a large geospatial conversion library used to provide server-side support for a wider range of files types.    curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -  (Required for Ubuntu) Prepare to install NodeJS, used to build Terria. The default NodeJS available with Ubuntu 14.04 is too old. On Windows, download and install the MSI from the npm web site. On Mac OS X, install it via Homebrew.    sudo apt-get install -y nodejs npm  Install NodeJS (run this on all versions of Linux, including Ubuntu).    sudo npm install -g gulp  Install Gulp, which is the actual build tool. Install it system-wide, as administrator (Windows 8+) or sudo (Ubuntu / Mac OS X). See also:  Install npm packages globally without sudo on OS X and Linux .    git clone https://github.com/TerriaJS/TerriaMap.git  Get the code    cd TerriaMap     npm install  Install the dependencies. This may take a while.  TerriaJS-Server  is installed to  node_modules/terriajs-server .    gulp  Build it, using Gulp. This compiles all the code into just a couple of big JavaScript files and moves other assets into  wwwroot/ .    npm start  Start the server.     You can access your instance at [[http://localhost:3001]] in a web browser.  The condensed form of all of the above:  sudo apt-get install -y git-core gdal-bin nodejs-legacy npm   sudo npm install -g gulp\ngit clone https://github.com/TerriaJS/TerriaMap.git   cd TerriaMap   npm install\ngulp\nnpm start", 
            "title": "Deploying a Terria Map"
        }, 
        {
            "location": "/Deployment/Deploying-Terria-Map/#making-changes", 
            "text": "Want to start tweaking? Proceed to  Customizing Terria .", 
            "title": "Making changes"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/", 
            "text": "Deploying and building TerriaJS\n\n\nIf you run into problems, don't forget to check \nProblems and Solutions\n.\n\n\nThis page explains how to deploy TerriaJS, which is the JavaScript library that powers sites like NationalMap. There are three reasons to do this:\n\n\n\n\nYou are doing development on TerriaJS itself.\n\n\nYou are working on a TerriaJS-based map, but have reached the limits of simple skinning and configuration, and now you need to make some code changes.\n\n\nYou are an expert and are building a TerriaJS-based map from scratch.\n\n\n\n\nIf you just want to get your own TerriaJS-based map running on your own machine, stop now\n. \n\n\nGo and \ndeploy a copy of National Map\n instead. That gives you all the scaffolding you need to run a TerriaJS-based map quickly and easily.\n\n\nDeploying TerriaJS\n\n\nInstructions are given for Ubuntu. Steps will be slightly different on other platforms.\n\n\nInstall dependencies\n\n\nInstall Git\n\n\nsudo apt-get install -y git-core\n\n\nInstall NodeJS\n\n\n\n\nOn Ubuntu: \nsudo apt-get install -y nodejs-legacy npm\n\n\nOn Windows, download and install the MSI from the npm web site.  \n\n\nOn Mac OS X, install it via Homebrew.\n\n\n\n\nInstall Gulp\n\n\nGulp is the tool that builds TerriaJS. Install it system-wide, as administrator (Windows 8+) or sudu (Ubuntu / Mac OS X). See also: \nInstall npm packages globally without sudo on OS X and Linux\n.\n\n\nsudo npm install -g gulp\nnpm install\n\n\n\n\nBuild TerriaJS\n\n\nGet the TerriaJS code from GitHub\n\n\ngit clone https://github.com/TerriaJS/terriajs.git\ncd terriajs\n\n\n\n\nInstall TerriaJS's dependencies using npm:\n\n\nnpm install\n\n\n\n\nBuild TerriaJS itself\n\n\ngulp\n\n\n\n\nTo start the TerriaJS node.js server, run:\n\n\nnpm start \n\n\n\n\n\nYou can access your TerriaJS instance at [[http://localhost:3002]] in a web browser.\n\n\nThe TerriaJS tests are at [[http://localhost:3002/SpecRunner.html]].\n\n\nTo continuously rebuild when you make changes to the code:\n\n\ngulp watch\n\n\nUse your local modifications in your local TerriaJS-based map (\nnpm link\n)\n\n\nPresumably you want to see the changes you make in a local copy of a TerriaJS-based map such as National Map.\n\n\n\n\nAfter completing the build process, run \nnpm link\n in the TerriaJS directory (presumably called \nterriajs\n). This sets up a symlink in your global NPM directory. \nMore details\n (including how to avoid needing sudo).\n\n\nIn your map directory (eg, \nnationalmap\n), run \nnpm link terriajs\n. This replaces the generic \nnode_modules/terriajs\n with a symlink to that symlink.\n\n\n\n\nSummary:\n\n\ncd terriajs\nnpm link\ncd ../nationalmap\nnpm link terriajs\n\n\n\n\nEnsure that the version of TerriaJS is compatible with your TerriaJS-based map (look in \npackage.json\n).\n\n\nUpdating Build\n\n\nThe following commands are what you would normally run to pull changes from GitHub and build them:\n\n\ngit pull --rebase\nnpm install\ngulp\nnpm start", 
            "title": "Deploying and Building"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#deploying-and-building-terriajs", 
            "text": "If you run into problems, don't forget to check  Problems and Solutions .  This page explains how to deploy TerriaJS, which is the JavaScript library that powers sites like NationalMap. There are three reasons to do this:   You are doing development on TerriaJS itself.  You are working on a TerriaJS-based map, but have reached the limits of simple skinning and configuration, and now you need to make some code changes.  You are an expert and are building a TerriaJS-based map from scratch.   If you just want to get your own TerriaJS-based map running on your own machine, stop now .   Go and  deploy a copy of National Map  instead. That gives you all the scaffolding you need to run a TerriaJS-based map quickly and easily.", 
            "title": "Deploying and building TerriaJS"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#deploying-terriajs", 
            "text": "Instructions are given for Ubuntu. Steps will be slightly different on other platforms.", 
            "title": "Deploying TerriaJS"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#install-dependencies", 
            "text": "", 
            "title": "Install dependencies"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#install-git", 
            "text": "sudo apt-get install -y git-core", 
            "title": "Install Git"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#install-nodejs", 
            "text": "On Ubuntu:  sudo apt-get install -y nodejs-legacy npm  On Windows, download and install the MSI from the npm web site.    On Mac OS X, install it via Homebrew.", 
            "title": "Install NodeJS"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#install-gulp", 
            "text": "Gulp is the tool that builds TerriaJS. Install it system-wide, as administrator (Windows 8+) or sudu (Ubuntu / Mac OS X). See also:  Install npm packages globally without sudo on OS X and Linux .  sudo npm install -g gulp\nnpm install", 
            "title": "Install Gulp"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#build-terriajs", 
            "text": "", 
            "title": "Build TerriaJS"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#get-the-terriajs-code-from-github", 
            "text": "git clone https://github.com/TerriaJS/terriajs.git\ncd terriajs", 
            "title": "Get the TerriaJS code from GitHub"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#install-terriajss-dependencies-using-npm", 
            "text": "npm install", 
            "title": "Install TerriaJS's dependencies using npm:"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#build-terriajs-itself", 
            "text": "gulp  To start the TerriaJS node.js server, run:  npm start    You can access your TerriaJS instance at [[http://localhost:3002]] in a web browser.  The TerriaJS tests are at [[http://localhost:3002/SpecRunner.html]].  To continuously rebuild when you make changes to the code:  gulp watch", 
            "title": "Build TerriaJS itself"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#use-your-local-modifications-in-your-local-terriajs-based-map-npm-link", 
            "text": "Presumably you want to see the changes you make in a local copy of a TerriaJS-based map such as National Map.   After completing the build process, run  npm link  in the TerriaJS directory (presumably called  terriajs ). This sets up a symlink in your global NPM directory.  More details  (including how to avoid needing sudo).  In your map directory (eg,  nationalmap ), run  npm link terriajs . This replaces the generic  node_modules/terriajs  with a symlink to that symlink.   Summary:  cd terriajs\nnpm link\ncd ../nationalmap\nnpm link terriajs  Ensure that the version of TerriaJS is compatible with your TerriaJS-based map (look in  package.json ).", 
            "title": "Use your local modifications in your local TerriaJS-based map (npm link)"
        }, 
        {
            "location": "/Deployment/Deploying-and-building-TerriaJS/#updating-build", 
            "text": "The following commands are what you would normally run to pull changes from GitHub and build them:  git pull --rebase\nnpm install\ngulp\nnpm start", 
            "title": "Updating Build"
        }, 
        {
            "location": "/Deployment/Overall-system-architecture/", 
            "text": "The National Map has an open architecture with all data sets being provided live to the browser by different government agencies.  This means that the data you are viewing is coming directly from a government agency (usually the official custodian of that data or an open data catalogue such as http://data.gov.au).  The overall system architecture is shown in this diagram.\n\n\n\n\nThe National Map software (developed by NICTA) is a thin layer on top of TerriaJS (also developed by NICTA and with a growing community of other contributors). This uses Cesium for 3D geospatial rendering and Leaflet for 2D geospatial rendering.  The architecture looks roughly like this.", 
            "title": "Overall System Architecture"
        }, 
        {
            "location": "/Deployment/Problems-and-Solutions/", 
            "text": "Cannot find module 'terriajs-cesium/wwwroot'\n\n\n\n\nMy app depends on a custom build of TerriaJS via a GitHub URL, but when I \nnpm install\n it fails with something like:\n\n\nError: Cannot find module 'terriajs-cesium/wwwroot' from '/home/kevin/github/nationalmap/node_modules/terriajs'\n\n\n\n\nThis is caused by an npm bug / quirk where it doesn't necessarily finish installing all of a package's dependencies before invoking the package's \npostinstall\n script.  See \nnpm/npm#6926\n.  The workaround is easy: run \nnpm install\n again.\n\n\nEMFILE\n error\n\n\nIf you get an \nEMFILE\n error while running gulp, you may need to increase the number of files that your system allows to be open simultaneously:\n\n\nulimit -n 2048\n\n\n\n\nENOSPC\n error\n\n\nIf you get an ENOSPC error running gulp watch then enter the following command to increase the number of files that can be watched.\n\n\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf \n sudo sysctl -p\n\n\n\n\nnpm run hot\n hangs, or other crazy things happen\n\n\nThis is usually caused by having two copies of a package, such as a Webpack loader, in different places in your application.  For example, you might have \nMyApp/node_modules/sass-loader\n and also \nMyApp/node_modules/terriajs/node_modules/sass_loader\n.\n\n\nThis happens \nall the time\n if you use \nnpm link\n, so don't use \nnpm link\n.  It is flawed model that interferes with npm's ability to de-duplicate modules, leading to problems like this and many others.  Instead, use \nnpmgitdev\n.\n\n\nIt may also happen if there are version conflicts between packages, or if npm's deduplication has decided to take the day off for unknown reasons.  When in doubt, run \nrm -rf node_modules/terriajs/node_modules \n npmgitdev install\n from your application directory.", 
            "title": "Problems and Solutions"
        }, 
        {
            "location": "/Deployment/Problems-and-Solutions/#cannot-find-module-terriajs-cesiumwwwroot", 
            "text": "My app depends on a custom build of TerriaJS via a GitHub URL, but when I  npm install  it fails with something like:  Error: Cannot find module 'terriajs-cesium/wwwroot' from '/home/kevin/github/nationalmap/node_modules/terriajs'   This is caused by an npm bug / quirk where it doesn't necessarily finish installing all of a package's dependencies before invoking the package's  postinstall  script.  See  npm/npm#6926 .  The workaround is easy: run  npm install  again.", 
            "title": "Cannot find module 'terriajs-cesium/wwwroot'"
        }, 
        {
            "location": "/Deployment/Problems-and-Solutions/#emfile-error", 
            "text": "If you get an  EMFILE  error while running gulp, you may need to increase the number of files that your system allows to be open simultaneously:  ulimit -n 2048", 
            "title": "EMFILE error"
        }, 
        {
            "location": "/Deployment/Problems-and-Solutions/#enospc-error", 
            "text": "If you get an ENOSPC error running gulp watch then enter the following command to increase the number of files that can be watched.  echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf   sudo sysctl -p", 
            "title": "ENOSPC error"
        }, 
        {
            "location": "/Deployment/Problems-and-Solutions/#npm-run-hot-hangs-or-other-crazy-things-happen", 
            "text": "This is usually caused by having two copies of a package, such as a Webpack loader, in different places in your application.  For example, you might have  MyApp/node_modules/sass-loader  and also  MyApp/node_modules/terriajs/node_modules/sass_loader .  This happens  all the time  if you use  npm link , so don't use  npm link .  It is flawed model that interferes with npm's ability to de-duplicate modules, leading to problems like this and many others.  Instead, use  npmgitdev .  It may also happen if there are version conflicts between packages, or if npm's deduplication has decided to take the day off for unknown reasons.  When in doubt, run  rm -rf node_modules/terriajs/node_modules   npmgitdev install  from your application directory.", 
            "title": "npm run hot hangs, or other crazy things happen"
        }, 
        {
            "location": "/Deployment/Setting-up-a-region-mapping-server/", 
            "text": "Region mapping\n is the process of matching a value in a CSV file to a pre-defined boundary, such as a postcode, local government area or electorate. The allowed boundaries for a given TerriaJS instance are given in a file such as \nwwwroot/data/regionMapping.json\n.\n\n\nThis is the current method to create a new set of boundaries not currently supported by TerriaJS:\n\n\nPrepare the shapefiles\n\n\n\n\nOne shapefile should contain all the polygons. \n\n\n\n\nThere should be a \nFID\n (case-sensitive) attribute, numbering each polygon starting from 0. If no FID attribute is present, use ogr2ogr to add it: \n\n\nogr2ogr -f \"ESRI Shapefile\" precincts-fid.shp precincts.shp -sql 'select FID,* from precincts'\n \n\n\nIf you have several files to process, use a line like this:\n\n\nfor i in GCCSA IARE ILOC IREG SOS SOSR SUA UCL; do ogr2ogr -f \"ESRI Shapefile\" ${i}_2011_AUST_fid.shp ${i}_2011_AUST.shp -sql 'select FID,* from '\"${i}_2011_AUST\"; done\n\n\n\n\n\n\nThere should be an attribute containing the identifiers you wish to match against (eg, for postcode boundaries, a \npostcode\n attribute containing the 4 digit codes themselves).\n\n\n\n\nThe projection should be EPSG:4326 (unprojected lat/long on WGS84).\n\n\n\n\nSet up GeoServer\n\n\n\n\n\n\nInstall GeoServer. The instance used by National Map is on AWS, available at geoserver.nationalmap.nicta.com.au.\n\n\n\n\n\n\nUsing the GeoServer web interface, create a data store of type \nDirectory of spatial files (shapefiles)\n.\n\n\n\n\n\n\nUpload the shapefile (.shp, .shx, .dbf and .qix) into the appropriate directory. For National Map's server, this is \n/mnt/data/region_map/shape_files/\n.\n\n\n\n\n\n\nCreate a style called \nregion_fid\n. Paste the contents of \nthis Gist\n.\n\n\n\n\n\n\nUnder \nLayers \n Add a New Resource\n, find the new shapefile name and click \nPublish\n \n\n\n\n\n\n\nSet these properties:\n\n\n\n\nDeclared SRS: EPSG:4326\n\n\nClick \"Compute from data\" and \"Compute from native bounds\" to set the bounding box.\n\n\nOn the \nPublishing\n page, set \nregion_fid\n as the \nDefault Style\n\n\n\n\nConfigure the regions in your TerriaJS-based map\n\n\nModify \nwwwroot/data/regionMapping.json\n. Add a section like this:\n\n\n    \"SA4\": {\n        \"layerName\":\"region_map:FID_SA4_2011_AUST\",\n        \"server\": \"http://geoserver.nationalmap.nicta.com.au/region_map/ows\",\n        \"regionProp\": \"SA4_CODE11\",\n        \"aliases\": [\"sa4_code\", \"sa4_code\", \"sa4\"],\n        \"description\": \"Statistical Area Level 4\"\n    },\n\n\n\n\n\n\"SA4\"\n: this identifier does not serve any machine-readable purpose outside this file.\n\n\nlayerName\n: the WMS layer of your new regions, including the workspace.\n\n\nserver\n: the URL of your GeoServer, up to and including \n/ows\n.\n\n\nregionProp\n: the name of the attribute containing region identifiers that will be matched against (case-sensitive)\n\n\naliases\n: alias of CSV column header names that will be recognised as matching this kind of feature. Must be lowercase.\n\n\ndescription\n: May be used in GUI elements and error messages.", 
            "title": "Setting up a Region Mapping Server"
        }, 
        {
            "location": "/Deployment/Setting-up-a-region-mapping-server/#prepare-the-shapefiles", 
            "text": "One shapefile should contain all the polygons.    There should be a  FID  (case-sensitive) attribute, numbering each polygon starting from 0. If no FID attribute is present, use ogr2ogr to add it:   ogr2ogr -f \"ESRI Shapefile\" precincts-fid.shp precincts.shp -sql 'select FID,* from precincts'    If you have several files to process, use a line like this:  for i in GCCSA IARE ILOC IREG SOS SOSR SUA UCL; do ogr2ogr -f \"ESRI Shapefile\" ${i}_2011_AUST_fid.shp ${i}_2011_AUST.shp -sql 'select FID,* from '\"${i}_2011_AUST\"; done    There should be an attribute containing the identifiers you wish to match against (eg, for postcode boundaries, a  postcode  attribute containing the 4 digit codes themselves).   The projection should be EPSG:4326 (unprojected lat/long on WGS84).", 
            "title": "Prepare the shapefiles"
        }, 
        {
            "location": "/Deployment/Setting-up-a-region-mapping-server/#set-up-geoserver", 
            "text": "Install GeoServer. The instance used by National Map is on AWS, available at geoserver.nationalmap.nicta.com.au.    Using the GeoServer web interface, create a data store of type  Directory of spatial files (shapefiles) .    Upload the shapefile (.shp, .shx, .dbf and .qix) into the appropriate directory. For National Map's server, this is  /mnt/data/region_map/shape_files/ .    Create a style called  region_fid . Paste the contents of  this Gist .    Under  Layers   Add a New Resource , find the new shapefile name and click  Publish      Set these properties:   Declared SRS: EPSG:4326  Click \"Compute from data\" and \"Compute from native bounds\" to set the bounding box.  On the  Publishing  page, set  region_fid  as the  Default Style", 
            "title": "Set up GeoServer"
        }, 
        {
            "location": "/Deployment/Setting-up-a-region-mapping-server/#configure-the-regions-in-your-terriajs-based-map", 
            "text": "Modify  wwwroot/data/regionMapping.json . Add a section like this:      \"SA4\": {\n        \"layerName\":\"region_map:FID_SA4_2011_AUST\",\n        \"server\": \"http://geoserver.nationalmap.nicta.com.au/region_map/ows\",\n        \"regionProp\": \"SA4_CODE11\",\n        \"aliases\": [\"sa4_code\", \"sa4_code\", \"sa4\"],\n        \"description\": \"Statistical Area Level 4\"\n    },   \"SA4\" : this identifier does not serve any machine-readable purpose outside this file.  layerName : the WMS layer of your new regions, including the workspace.  server : the URL of your GeoServer, up to and including  /ows .  regionProp : the name of the attribute containing region identifiers that will be matched against (case-sensitive)  aliases : alias of CSV column header names that will be recognised as matching this kind of feature. Must be lowercase.  description : May be used in GUI elements and error messages.", 
            "title": "Configure the regions in your TerriaJS-based map"
        }, 
        {
            "location": "/Deployment/Using-a-vector-tile-source-for-region-mapping/", 
            "text": "(This page is under development)\n\n\nRegion mapping\n is the process of matching a value in a CSV file to a pre-defined boundary, such as a postcode, local government area or electorate. The allowed boundaries for a given TerriaJS instance are given in a file such as \nwwwroot/data/regionMapping.json\n.\n\n\nBasic methodology for distinction between files included in the repo and files in the data archive:\n\n\n\n\nAll files included in the repo should work with any shapefile that defines a region map (a shapefile with only \u2013 or predominately \u2013 polygon geometry which define regions in features which can be uniquely identified by FID or some other identifier)\n\n\nFiles from the archive are for serving nationalmap's specific region maps\n\n\n\n\nHow to set up a vector tile server\n\n\nPreparing shapefiles for region mapping with Tessera is a complex, time-consuming process. If you just want the standard region boundaries, don't follow the \nvector-tile-server instructions\n. Instead, do the following:\n\n\nDownload and run vector-tile-server\n\n\n1) Clone the server from Github:\n\n\ngit clone https://github.com/TerriaJS/vector-tile-server\ncd vector-tile-server\n\n\n\n\n2) Install dependencies of the server:\n\n\nnpm install\n\n\n3) Extract the data folder (called \ndata2/\n) from the provided archive (https://dl.dropboxusercontent.com/u/18091071/MVTResources.zip) into the root directory of the repo\n\n\nwget https://dl.dropboxusercontent.com/u/18091071/MVTResources.zip\nunzip MVTResources.zip\n\n\n\n\n3) Generate the \nregionMapping_out.json\n config file:\n\n\nnode setup.js regionMapping.json\n\n\n4) Run the server:\n\n\n./server.sh\nListening at http://:::8000/\nAdding mbtiles:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_TM_WORLD_BORDERS/store.mbtiles\nAdding bridge:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_TM_WORLD_BORDERS/data.xml\nAdding mbtiles:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_SA4_2011_AUST/store.mbtiles\nAdding bridge:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_SA4_2011_AUST/data.xml\nAdding mbtiles:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_SA2_2011_AUST/store.mbtiles\nAdding bridge:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_SA2_2011_AUST/data.xml\n\n\n\n\n5) Test the server using \nSA2\n, \nSA4\n and \nWORLD_BORDERS\n region maps. Other region types will use WMS (so you can compare the two easily).\n  - ABS has 2011 Census data for testing WMS (\nSA3\n) and MVT (\nSA2\n, \nSA4\n)\n  - The \ntest\n init file has \nCountry Regions\n and \nDroughts by Country\n which both use \nWORLD_BORDERS\n\n\nUseful command to fix absolute path config files:\n\n\nConfig files have absolute paths, so publishing to a server requires editing all config files (all \nhybrid.json\n and the server's \nconfig.json\n). Replacing all the \nhybrid.json\n can be done using the following:\n\n\nfind -name hybrid.json -exec sed -i.bak 's:/Users/Steve/Data61/vector-tile-server:/home/ubuntu/vector-tile-server:g' {} \\;\n\n\n\n\nTest the server from a Terria map\n\n\n1) Checkout \nmapbox_vt_region_provider\n branches of NationalMap and TerriaJS, and link them:\n\n\ngit clone -b mapbox_vt_region_provider https://github.com/NICTA/NationalMap\ngit clone -b mapbox_vt_region_provider https://github.com/TerriaJS/TerriaJS\ncd NationalMap\nln -s ../../terriajs node_modules/terriajs\nnpm install\n\n\n\n\n2) Rebuild NationalMap and run it\n\n\ngulp\nnpm run\n\n\n\n\n3) In a browser, go to \nlocalhost:3001#test\n, and load the \"Test Data \n Region Mapping (CSV) \n 2011 Census AUST (SA4)\" file.\n\n\nIf you want to re-generate shapeindex files and mbtiles cache\n\n\n\n\n\n\nGet the original geoserver shapefiles (or the reprojected ones in the data archive, just not the ones from GeoServer WFS requests as these have incorrect property type information)\n\n\n\n\n\n\nReproject the shapefiles to EPSG:3857\n\n\n\n\n\n\nnpm list mapnik\n and ensure mapnik is 3.5.0 or later (a \nshapeindex\n bug was fixed between \nmapnik@3.4.16\n \n \nmapnik@3.5.0\n)\n\n\n\n\n\n\nGenerate shapeindexes \nfind . -name *.shp -print0 | xargs -0 ./node_modules/mapnik/lib/binding/{node-v47-darwin-x64 or similar}/shapeindex\n (the folder which \nshapeindex\n is in changes depending on the specific platform and node version used, but the \nshapeindex\n binary works the same)\n\n\n\n\n\n\nRun \nsave_tiles.js\n from \nsetup.js\n\n\n\n\n\n\nMethod for adding custom region maps:\n\n\nPrepare the shapefiles\n\n\n\n\nOne shapefile should contain all the polygons.\n\n\n\n\nThere should be a \nFID\n (case-sensitive) attribute, numbering each polygon starting from 0. If no FID attribute is present, use ogr2ogr to add it:\n\n\nogr2ogr -f \"ESRI Shapefile\" precincts-fid.shp precincts.shp -sql 'select FID,* from precincts'\n\n\nIf you have several files to process, use a line like this:\n\n\nfor i in GCCSA IARE ILOC IREG SOS SOSR SUA UCL; do ogr2ogr -f \"ESRI Shapefile\" ${i}_2011_AUST_fid.shp ${i}_2011_AUST.shp -sql 'select FID,* from '\"${i}_2011_AUST\"; done\n\n\n\n\n\n\nThere should be an attribute containing the identifiers you wish to match against (eg, for postcode boundaries, a \npostcode\n attribute containing the 4 digit codes themselves).\n\n\n\n\nThe projection should be EPSG:4326 (unprojected lat/long on WGS84).\n\n\nWhy use EPSG:4326? Is this something that GeoServer works well with, or is it something WebMapService needs, or is it for convenience for Cesium, or something else?\n\n\nVector tile server prefers the shapefile in EPSG:3857 (or at least I've written it to use that...)\n\n\n\n\nAdd as a new layer\n\n\nThe Node-js script addRegionMap.js helps a user to add their own custom region map. Given a short json config file, it can generate all necessary server\nconfiguration and fake \"cached WFS\" \n regionMapping jsons for the TerriaJS client.\n\n\nokcountiesRegionMapConfig.json:\n\n\n{\n    \nlayerName\n: \nokcounties\n,\n    \nshapefile\n: \nokcounties.shp\n,\n    \ngenerateTilesTo\n: 12,\n    \naddFID\n: true,\n    \nserver\n: \nhttp://127.0.0.1:8000/okcounties/{z}/{x}/{y}.pbf\n,\n    \nserverSubdomains\n: [],\n\n    \nregionMappingEntries\n: {\n        \nokcounty\n: {\n            \nregionProp\n: \ncounty\n,\n            \naliases\n: [\n                \nokcounty\n\n            ],\n            \ndescription\n: \nOklahoma Counties\n\n        },\n        \nokcounty_name\n: {\n            \nregionProp\n: \nname\n,\n            \naliases\n: [\n                \nokcounty_name\n\n            ],\n            \ndescription\n: \nOklahoma Counties\n\n        }\n    }\n}\n\n\n\n\n\n\nWrite out a config similar to the above config\n\n\nRun \nnode addRegionMap.js okcountiesRegionMapConfig.json\n\n\nNavigate (or \ncd\n) to \noutput_files\n\n\nCopy relevant region_map-LAYERNAME_VARIABLE.json to wwwroot/data/regionids of a Terria map (such as nationalmap)\n\n\nReplace wwwroot/data/regionMapping.json with the contents of regionMapping-LAYERNAME.json, or copy and append the entries\n\n\nBuild and run the Terria map, and run the vector tile server\n\n\n\n\nConfigure the regions in your TerriaJS-based map\n\n\nModify \nwwwroot/data/regionMapping.json\n. Add a section like this:\n\n\nSA4\n: {\n    \nlayerName\n:\nregion_map:FID_SA4_2011_AUST\n,\n    \nserver\n: \nhttp://geoserver.nationalmap.nicta.com.au/region_map/ows\n,\n    \nregionProp\n: \nSA4_CODE11\n,\n    \naliases\n: [\nsa4_code\n, \nsa4_code\n, \nsa4\n],\n    \ndescription\n: \nStatistical Area Level 4\n\n},\n\n\n\n\n\n\n\"SA4\"\n: this identifier does not serve any machine-readable purpose outside this file.\n\n\nlayerName\n: the WMS layer of your new regions, including the workspace.\n\n\nserver\n: the URL of your GeoServer, up to and including \n/ows\n.\n\n\nregionProp\n: the name of the attribute containing region identifiers that will be matched against (case-sensitive)\n\n\naliases\n: alias of CSV column header names that will be recognised as matching this kind of feature. Must be lowercase.\n\n\ndescription\n: May be used in GUI elements and error messages.", 
            "title": "Using a Vector Tile Source"
        }, 
        {
            "location": "/Deployment/Using-a-vector-tile-source-for-region-mapping/#basic-methodology-for-distinction-between-files-included-in-the-repo-and-files-in-the-data-archive", 
            "text": "All files included in the repo should work with any shapefile that defines a region map (a shapefile with only \u2013 or predominately \u2013 polygon geometry which define regions in features which can be uniquely identified by FID or some other identifier)  Files from the archive are for serving nationalmap's specific region maps", 
            "title": "Basic methodology for distinction between files included in the repo and files in the data archive:"
        }, 
        {
            "location": "/Deployment/Using-a-vector-tile-source-for-region-mapping/#how-to-set-up-a-vector-tile-server", 
            "text": "Preparing shapefiles for region mapping with Tessera is a complex, time-consuming process. If you just want the standard region boundaries, don't follow the  vector-tile-server instructions . Instead, do the following:", 
            "title": "How to set up a vector tile server"
        }, 
        {
            "location": "/Deployment/Using-a-vector-tile-source-for-region-mapping/#download-and-run-vector-tile-server", 
            "text": "1) Clone the server from Github:  git clone https://github.com/TerriaJS/vector-tile-server\ncd vector-tile-server  2) Install dependencies of the server:  npm install  3) Extract the data folder (called  data2/ ) from the provided archive (https://dl.dropboxusercontent.com/u/18091071/MVTResources.zip) into the root directory of the repo  wget https://dl.dropboxusercontent.com/u/18091071/MVTResources.zip\nunzip MVTResources.zip  3) Generate the  regionMapping_out.json  config file:  node setup.js regionMapping.json  4) Run the server:  ./server.sh\nListening at http://:::8000/\nAdding mbtiles:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_TM_WORLD_BORDERS/store.mbtiles\nAdding bridge:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_TM_WORLD_BORDERS/data.xml\nAdding mbtiles:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_SA4_2011_AUST/store.mbtiles\nAdding bridge:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_SA4_2011_AUST/data.xml\nAdding mbtiles:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_SA2_2011_AUST/store.mbtiles\nAdding bridge:///Users/stevebennett/odev/nicta/nationalmap/vector-tiles/vector-tile-server/data2/FID_SA2_2011_AUST/data.xml  5) Test the server using  SA2 ,  SA4  and  WORLD_BORDERS  region maps. Other region types will use WMS (so you can compare the two easily).\n  - ABS has 2011 Census data for testing WMS ( SA3 ) and MVT ( SA2 ,  SA4 )\n  - The  test  init file has  Country Regions  and  Droughts by Country  which both use  WORLD_BORDERS", 
            "title": "Download and run vector-tile-server"
        }, 
        {
            "location": "/Deployment/Using-a-vector-tile-source-for-region-mapping/#useful-command-to-fix-absolute-path-config-files", 
            "text": "Config files have absolute paths, so publishing to a server requires editing all config files (all  hybrid.json  and the server's  config.json ). Replacing all the  hybrid.json  can be done using the following:  find -name hybrid.json -exec sed -i.bak 's:/Users/Steve/Data61/vector-tile-server:/home/ubuntu/vector-tile-server:g' {} \\;", 
            "title": "Useful command to fix absolute path config files:"
        }, 
        {
            "location": "/Deployment/Using-a-vector-tile-source-for-region-mapping/#test-the-server-from-a-terria-map", 
            "text": "1) Checkout  mapbox_vt_region_provider  branches of NationalMap and TerriaJS, and link them:  git clone -b mapbox_vt_region_provider https://github.com/NICTA/NationalMap\ngit clone -b mapbox_vt_region_provider https://github.com/TerriaJS/TerriaJS\ncd NationalMap\nln -s ../../terriajs node_modules/terriajs\nnpm install  2) Rebuild NationalMap and run it  gulp\nnpm run  3) In a browser, go to  localhost:3001#test , and load the \"Test Data   Region Mapping (CSV)   2011 Census AUST (SA4)\" file.", 
            "title": "Test the server from a Terria map"
        }, 
        {
            "location": "/Deployment/Using-a-vector-tile-source-for-region-mapping/#if-you-want-to-re-generate-shapeindex-files-and-mbtiles-cache", 
            "text": "Get the original geoserver shapefiles (or the reprojected ones in the data archive, just not the ones from GeoServer WFS requests as these have incorrect property type information)    Reproject the shapefiles to EPSG:3857    npm list mapnik  and ensure mapnik is 3.5.0 or later (a  shapeindex  bug was fixed between  mapnik@3.4.16     mapnik@3.5.0 )    Generate shapeindexes  find . -name *.shp -print0 | xargs -0 ./node_modules/mapnik/lib/binding/{node-v47-darwin-x64 or similar}/shapeindex  (the folder which  shapeindex  is in changes depending on the specific platform and node version used, but the  shapeindex  binary works the same)    Run  save_tiles.js  from  setup.js", 
            "title": "If you want to re-generate shapeindex files and mbtiles cache"
        }, 
        {
            "location": "/Deployment/Using-a-vector-tile-source-for-region-mapping/#method-for-adding-custom-region-maps", 
            "text": "", 
            "title": "Method for adding custom region maps:"
        }, 
        {
            "location": "/Deployment/Using-a-vector-tile-source-for-region-mapping/#prepare-the-shapefiles", 
            "text": "One shapefile should contain all the polygons.   There should be a  FID  (case-sensitive) attribute, numbering each polygon starting from 0. If no FID attribute is present, use ogr2ogr to add it:  ogr2ogr -f \"ESRI Shapefile\" precincts-fid.shp precincts.shp -sql 'select FID,* from precincts'  If you have several files to process, use a line like this:  for i in GCCSA IARE ILOC IREG SOS SOSR SUA UCL; do ogr2ogr -f \"ESRI Shapefile\" ${i}_2011_AUST_fid.shp ${i}_2011_AUST.shp -sql 'select FID,* from '\"${i}_2011_AUST\"; done    There should be an attribute containing the identifiers you wish to match against (eg, for postcode boundaries, a  postcode  attribute containing the 4 digit codes themselves).   The projection should be EPSG:4326 (unprojected lat/long on WGS84).  Why use EPSG:4326? Is this something that GeoServer works well with, or is it something WebMapService needs, or is it for convenience for Cesium, or something else?  Vector tile server prefers the shapefile in EPSG:3857 (or at least I've written it to use that...)", 
            "title": "Prepare the shapefiles"
        }, 
        {
            "location": "/Deployment/Using-a-vector-tile-source-for-region-mapping/#add-as-a-new-layer", 
            "text": "The Node-js script addRegionMap.js helps a user to add their own custom region map. Given a short json config file, it can generate all necessary server\nconfiguration and fake \"cached WFS\"   regionMapping jsons for the TerriaJS client.  okcountiesRegionMapConfig.json:  {\n     layerName :  okcounties ,\n     shapefile :  okcounties.shp ,\n     generateTilesTo : 12,\n     addFID : true,\n     server :  http://127.0.0.1:8000/okcounties/{z}/{x}/{y}.pbf ,\n     serverSubdomains : [],\n\n     regionMappingEntries : {\n         okcounty : {\n             regionProp :  county ,\n             aliases : [\n                 okcounty \n            ],\n             description :  Oklahoma Counties \n        },\n         okcounty_name : {\n             regionProp :  name ,\n             aliases : [\n                 okcounty_name \n            ],\n             description :  Oklahoma Counties \n        }\n    }\n}   Write out a config similar to the above config  Run  node addRegionMap.js okcountiesRegionMapConfig.json  Navigate (or  cd ) to  output_files  Copy relevant region_map-LAYERNAME_VARIABLE.json to wwwroot/data/regionids of a Terria map (such as nationalmap)  Replace wwwroot/data/regionMapping.json with the contents of regionMapping-LAYERNAME.json, or copy and append the entries  Build and run the Terria map, and run the vector tile server", 
            "title": "Add as a new layer"
        }, 
        {
            "location": "/Deployment/Using-a-vector-tile-source-for-region-mapping/#configure-the-regions-in-your-terriajs-based-map", 
            "text": "Modify  wwwroot/data/regionMapping.json . Add a section like this:  SA4 : {\n     layerName : region_map:FID_SA4_2011_AUST ,\n     server :  http://geoserver.nationalmap.nicta.com.au/region_map/ows ,\n     regionProp :  SA4_CODE11 ,\n     aliases : [ sa4_code ,  sa4_code ,  sa4 ],\n     description :  Statistical Area Level 4 \n},   \"SA4\" : this identifier does not serve any machine-readable purpose outside this file.  layerName : the WMS layer of your new regions, including the workspace.  server : the URL of your GeoServer, up to and including  /ows .  regionProp : the name of the attribute containing region identifiers that will be matched against (case-sensitive)  aliases : alias of CSV column header names that will be recognised as matching this kind of feature. Must be lowercase.  description : May be used in GUI elements and error messages.", 
            "title": "Configure the regions in your TerriaJS-based map"
        }, 
        {
            "location": "/Deployment/WMS-Services/", 
            "text": "Installing Java and Tomcat7\n\n\nOn ubuntu install the java and tomcat7 packages\n\n\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install -y oracle-java7-installer\nsudo apt-get install -y oracle-java7-set-default\n\n\n\n\nCheck that you have the correct java version installed.  It should be 1.7._xx.\n\n\njava -version\n\n\n\n\nNow install Tomcat\n\n\nsudo apt-get install tomcat7\n\n\n\n\nTo check that the server is running properly, open your browser and go to http://localhost:8080.\n\n\nTuning up the Tomcat server\n\n\nEdit the tomcat7 settings file\n\n\nsudo nano /etc/default/tomcat7\n\n\n\n\nMake the following changes to JAVA_OPTS and JAVA_HOME\n\n\nJAVA_OPTS=\n-Djava.awt.headless=true -server -Xmx8384m -Xms2048m -XX:SoftRefLRUPolicyMSPerMB=36000 -XX:MaxPermSize=2048m -XX:+UseParallelGC\n\n\nJAVA_HOME=/usr/lib/jvm/java-7-oracle/jre\n\n\n\n\nAnd restart your tomcat server\n\n\nsudo /etc/init.d/tomcat7 restart\n\n\n\n\nInstalling Geoserver\n\n\nTo install geoserver, go to http://geoserver.org/ and download the current stable web archive file to your home folder, unzip the file and copy geoserver.war to your home folder, and then copy that file to the tomcat installation as the desired name for the geoserver and restart.  For example to create a geoserver called my_new_geoserver use the commands below.\n\n\nsudo cp geoserver.war /var/lib/tomcat7/webapps/my_new_geoserver.war\nsudo /etc/init.d/tomcat7 restart\n\n\n\n\nYou should now be able to see a geoserver running at http://localhost:8080/my_new_geoserver/ .  \n\n\nThe geoserver will contain the example datasets that ship with Geoserver.  Geoserver has good documentation available \nhere\n to get you going on entering your data into your server instance.\n\n\nCaching Tiles\n\n\nIn order for your server to perform effectively we highly recommend that you cache the tile requests from National Map.  There are 2 primary ways to do this - either turning on the GeoWebCache that comes with Geoserver or running a proxy server in front of your geoserver.\n\n\nThe easiest solution is to just use the GeoWebCache service.  The documentation for GeoWebCache is \nhere\n.  Mainly it consists of turning on direct integration in the caching defaults and making sure that your layers have caching turned on.  You may also want to control the caching folder which can be done by editing your geoserver instance as explained \nhere\n.  You will also probably need to set permissions in your new cache folder to 666.\n\n\nThe other solution is to put a caching proxy in front of your geoserver instance.  This also has the benefit of being able to access your server on port 80 if you wish.  The two primary options we have worked with are \nnginx\n and \nvarnish\n.  These are both available as packages on ubuntu.  Below is an example of setting up nginx to work with geoserver.\n\n\nnginx\n\n\nsudo apt-get install -y nginx\n\n\n\n\nThen modify the configuration files to point to your server and turn on caching\n\n\nsudo /etc/init.d/nginx stop\nsudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.orig\nsudo nano /etc/nginx/nginx.conf\n\n\n\n\nand add this line at the bottom of the http section\n\n\nproxy_cache_path /your/cache/folder/ keys_zone=one:10m max_size=8G;\n\n\n\n\nsudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.orig\nsudo nano /etc/nginx/sites-available/default\n\n\n\n\nin the servers section, comment out the root and index lines and add this line right after\n\n\nproxy_cache one;\n\n\n\n\nand replace the location setting in the server section with the following code (replacing my_new_geoserver with your server name)\n\n\n    location /my_new_geoserver/ {\n        proxy_pass http://127.0.0.1:8080/;\n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n            proxy_redirect off;\n            proxy_buffering off;\n            proxy_set_header        Host            $http_host;\n            proxy_set_header        X-Real-IP       $remote_addr;\n            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n\n\n\nNow restart\n\n\nsudo /etc/init.d/nginx start\n\n\n\n\nAnd if all went as planned you should be able to access your server at http://localhost/my_new_geoserver/web.\n\n\nAllowing National Map to access your server\n\n\nDue to security in modern browsers, for National Map to use your service you will probably need to do a little more work.  Either you will need to set up your server with CORS support or provide a proxy service for your geoserver to allow National Map access to your data.  National Map includes a proxy to some domains by default and if you are in these domains we will provide the proxy service.\n\n\nIf you are not in these domains, you will get an cross-domain-access error. To work with National Map without using a proxy, Geoserver must be configured to support \nCORS\n.  The most common way to do this is to install \nCORS Filter\n.\n\n\nAn alternative approach, is to add CORS support to your nginx or varnish proxy service.  See the documentation on how to do this.  Thanks to the AREMI team, adding the necessary CORS headers with a Varnish reverse-proxy in front of the Geoserver can be done by adding the following to \n/etc/varnish/default.vcl\n:\n\n\nsub vcl_fetch {\n    set beresp.http.Access-Control-Allow-Origin = \n*\n;\n    set beresp.http.Access-Control-Allow-Credentials = \ntrue\n;\n}\n\n\n\n\nMoving your Geoserver Instance\n\n\nMoving your geoserver instance to a new location is pretty straightforward.  The .war file that a geoserver instance comes in is just a special layout of a .zip file.  So the following commands can be used to create a .war file that you can then add to a tomcat instance on another server.\n\n\nsudo /etc/init.d/tomcat7 stop\nsudo mv /var/lib/tomcat7/webapps/my_new_geoserver .\ncd my_new_geoserver\nzip -r my_new_geoserver.war *\nsudo mv my_new_geoserver /var/lib/tomcat7/webapps\nsudo /etc/init.d/tomcat7 start\n\n\n\n\nonce it's uploaded to the new site you can add the geoserver with:\n\n\nsudo cp my_new_geoserver.war /var/lib/tomcat7/webapps/my_new_geoserver.war\nsudo /etc/init.d/tomcat7 restart\n\n\n\n\nRunning your Geoserver on AWS\n\n\nRunning a geoserver on a standard EC2 instance requires a little tuning to take advantage of the instance storage volume properly.  First go ahead and create your instance (we use a standard m3.large instance with port 80 opened) and install java and tomcat as explained above.\n\n\nNow package up your geoserver as described in the previous section and copy it up to your EC2 instance and ssh in once it's copied.\n\n\nscp -i geoserver-instance.pem my_new_geoserver.war ubuntu@xx.xx.xx.xx:/home/ubuntu\nssh -i geoserver-instance.pem ubuntu@xx.xx.xx.xx\n\n\n\n\nFrom the shell the first thing you need to do is move the webapps folder in tomcat to the instance storage.\n\n\nsudo /etc/init.d/tomcat7 stop\nsudo cp -rf /var/lib/tomcat7/webapps /var/lib/tomcat7/webapps.orig\nsudo mv /var/lib/tomcat7/webapps/ /mnt\nsudo ln -s /mnt/webapps /var/lib/tomcat7/webapps\n\n\n\n\nand copy your uploaded geoserver\n\n\nsudo cp *.war /mnt/webapps\n\n\n\n\nand then restart\n\n\nsudo /etc/init.d/tomcat7 start\nsudo /etc/init.d/nginx restart\n\n\n\n\nIf you are using geowebcache or a caching proxy you will need to change the caching dir as referenced above to also be on the /mnt drive to avoid running out of space on the EC2 boot drive.\n\n\nNOTE: If the instance is stopped you will need to go through these step again when you start, since the instance storage is wiped clean in this case.  This does not apply to reboot of the OS in the EC2 instance so it will still be fine after.", 
            "title": "WMS Services"
        }, 
        {
            "location": "/Deployment/WMS-Services/#installing-java-and-tomcat7", 
            "text": "On ubuntu install the java and tomcat7 packages  sudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install -y oracle-java7-installer\nsudo apt-get install -y oracle-java7-set-default  Check that you have the correct java version installed.  It should be 1.7._xx.  java -version  Now install Tomcat  sudo apt-get install tomcat7  To check that the server is running properly, open your browser and go to http://localhost:8080.", 
            "title": "Installing Java and Tomcat7"
        }, 
        {
            "location": "/Deployment/WMS-Services/#tuning-up-the-tomcat-server", 
            "text": "Edit the tomcat7 settings file  sudo nano /etc/default/tomcat7  Make the following changes to JAVA_OPTS and JAVA_HOME  JAVA_OPTS= -Djava.awt.headless=true -server -Xmx8384m -Xms2048m -XX:SoftRefLRUPolicyMSPerMB=36000 -XX:MaxPermSize=2048m -XX:+UseParallelGC \n\nJAVA_HOME=/usr/lib/jvm/java-7-oracle/jre  And restart your tomcat server  sudo /etc/init.d/tomcat7 restart", 
            "title": "Tuning up the Tomcat server"
        }, 
        {
            "location": "/Deployment/WMS-Services/#installing-geoserver", 
            "text": "To install geoserver, go to http://geoserver.org/ and download the current stable web archive file to your home folder, unzip the file and copy geoserver.war to your home folder, and then copy that file to the tomcat installation as the desired name for the geoserver and restart.  For example to create a geoserver called my_new_geoserver use the commands below.  sudo cp geoserver.war /var/lib/tomcat7/webapps/my_new_geoserver.war\nsudo /etc/init.d/tomcat7 restart  You should now be able to see a geoserver running at http://localhost:8080/my_new_geoserver/ .    The geoserver will contain the example datasets that ship with Geoserver.  Geoserver has good documentation available  here  to get you going on entering your data into your server instance.", 
            "title": "Installing Geoserver"
        }, 
        {
            "location": "/Deployment/WMS-Services/#caching-tiles", 
            "text": "In order for your server to perform effectively we highly recommend that you cache the tile requests from National Map.  There are 2 primary ways to do this - either turning on the GeoWebCache that comes with Geoserver or running a proxy server in front of your geoserver.  The easiest solution is to just use the GeoWebCache service.  The documentation for GeoWebCache is  here .  Mainly it consists of turning on direct integration in the caching defaults and making sure that your layers have caching turned on.  You may also want to control the caching folder which can be done by editing your geoserver instance as explained  here .  You will also probably need to set permissions in your new cache folder to 666.  The other solution is to put a caching proxy in front of your geoserver instance.  This also has the benefit of being able to access your server on port 80 if you wish.  The two primary options we have worked with are  nginx  and  varnish .  These are both available as packages on ubuntu.  Below is an example of setting up nginx to work with geoserver.", 
            "title": "Caching Tiles"
        }, 
        {
            "location": "/Deployment/WMS-Services/#nginx", 
            "text": "sudo apt-get install -y nginx  Then modify the configuration files to point to your server and turn on caching  sudo /etc/init.d/nginx stop\nsudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.orig\nsudo nano /etc/nginx/nginx.conf  and add this line at the bottom of the http section  proxy_cache_path /your/cache/folder/ keys_zone=one:10m max_size=8G;  sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.orig\nsudo nano /etc/nginx/sites-available/default  in the servers section, comment out the root and index lines and add this line right after  proxy_cache one;  and replace the location setting in the server section with the following code (replacing my_new_geoserver with your server name)      location /my_new_geoserver/ {\n        proxy_pass http://127.0.0.1:8080/;\n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n            proxy_redirect off;\n            proxy_buffering off;\n            proxy_set_header        Host            $http_host;\n            proxy_set_header        X-Real-IP       $remote_addr;\n            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n    }  Now restart  sudo /etc/init.d/nginx start  And if all went as planned you should be able to access your server at http://localhost/my_new_geoserver/web.", 
            "title": "nginx"
        }, 
        {
            "location": "/Deployment/WMS-Services/#allowing-national-map-to-access-your-server", 
            "text": "Due to security in modern browsers, for National Map to use your service you will probably need to do a little more work.  Either you will need to set up your server with CORS support or provide a proxy service for your geoserver to allow National Map access to your data.  National Map includes a proxy to some domains by default and if you are in these domains we will provide the proxy service.  If you are not in these domains, you will get an cross-domain-access error. To work with National Map without using a proxy, Geoserver must be configured to support  CORS .  The most common way to do this is to install  CORS Filter .  An alternative approach, is to add CORS support to your nginx or varnish proxy service.  See the documentation on how to do this.  Thanks to the AREMI team, adding the necessary CORS headers with a Varnish reverse-proxy in front of the Geoserver can be done by adding the following to  /etc/varnish/default.vcl :  sub vcl_fetch {\n    set beresp.http.Access-Control-Allow-Origin =  * ;\n    set beresp.http.Access-Control-Allow-Credentials =  true ;\n}", 
            "title": "Allowing National Map to access your server"
        }, 
        {
            "location": "/Deployment/WMS-Services/#moving-your-geoserver-instance", 
            "text": "Moving your geoserver instance to a new location is pretty straightforward.  The .war file that a geoserver instance comes in is just a special layout of a .zip file.  So the following commands can be used to create a .war file that you can then add to a tomcat instance on another server.  sudo /etc/init.d/tomcat7 stop\nsudo mv /var/lib/tomcat7/webapps/my_new_geoserver .\ncd my_new_geoserver\nzip -r my_new_geoserver.war *\nsudo mv my_new_geoserver /var/lib/tomcat7/webapps\nsudo /etc/init.d/tomcat7 start  once it's uploaded to the new site you can add the geoserver with:  sudo cp my_new_geoserver.war /var/lib/tomcat7/webapps/my_new_geoserver.war\nsudo /etc/init.d/tomcat7 restart", 
            "title": "Moving your Geoserver Instance"
        }, 
        {
            "location": "/Deployment/WMS-Services/#running-your-geoserver-on-aws", 
            "text": "Running a geoserver on a standard EC2 instance requires a little tuning to take advantage of the instance storage volume properly.  First go ahead and create your instance (we use a standard m3.large instance with port 80 opened) and install java and tomcat as explained above.  Now package up your geoserver as described in the previous section and copy it up to your EC2 instance and ssh in once it's copied.  scp -i geoserver-instance.pem my_new_geoserver.war ubuntu@xx.xx.xx.xx:/home/ubuntu\nssh -i geoserver-instance.pem ubuntu@xx.xx.xx.xx  From the shell the first thing you need to do is move the webapps folder in tomcat to the instance storage.  sudo /etc/init.d/tomcat7 stop\nsudo cp -rf /var/lib/tomcat7/webapps /var/lib/tomcat7/webapps.orig\nsudo mv /var/lib/tomcat7/webapps/ /mnt\nsudo ln -s /mnt/webapps /var/lib/tomcat7/webapps  and copy your uploaded geoserver  sudo cp *.war /mnt/webapps  and then restart  sudo /etc/init.d/tomcat7 start\nsudo /etc/init.d/nginx restart  If you are using geowebcache or a caching proxy you will need to change the caching dir as referenced above to also be on the /mnt drive to avoid running out of space on the EC2 boot drive.  NOTE: If the instance is stopped you will need to go through these step again when you start, since the instance storage is wiped clean in this case.  This does not apply to reboot of the OS in the EC2 instance so it will still be fine after.", 
            "title": "Running your Geoserver on AWS"
        }, 
        {
            "location": "/Contributors/", 
            "text": "TerriaJS Contributor's Guide\n\n\nFor all contributors:\n\n\n\n\nCONTRIBUTING.md\n: how to submit a pull request. Please read! :)\n\n\nSetting up a development environment\n\n\nWorking with TerriaJS and Cesium\n\n\n\n\nSpecial cases:\n\n\n\n\nSetting up Saucelabs\n: Creating a local Saucelabs instance for cross-browser testing.\n\n\nUsing Docker\n: How to use Docker for development and deployment.", 
            "title": "Overview"
        }, 
        {
            "location": "/Contributors/#terriajs-contributors-guide", 
            "text": "For all contributors:   CONTRIBUTING.md : how to submit a pull request. Please read! :)  Setting up a development environment  Working with TerriaJS and Cesium   Special cases:   Setting up Saucelabs : Creating a local Saucelabs instance for cross-browser testing.  Using Docker : How to use Docker for development and deployment.", 
            "title": "TerriaJS Contributor's Guide"
        }, 
        {
            "location": "/Contributors/Development-environment/", 
            "text": "Setting up a TerriaJS development environment\n\n\nFirst, \ndeploy and build your instance\n.\n\n\nUpdating Build\n\n\nThe following commands are what you would normally run to pull changes from GitHub and build them:\n\n\ngit pull --rebase\nnpm install\ngulp\nnpm start\n\n\n\n\nBuilding a Terria based site against a modified TerriaJS\n\n\nWhat if you need to make changes to \nTerriaJS\n while working on a site that depends on it?\n\n\nIn the process above, the \nTerriaJS package\n is installed to the \nnode_modules\n directory by \nnpm install\n.  Please do not edit TerriaJS directly in the \nnode_modules\n directory, because changes will be clobbered the next time you run \nnpm install\n.  Instead, follow these instructions.\n\n\nFirst, set up a TerriaJS dev environment on your system by following the \ninstructions\n.  Then, checkout an appropriate version of TerriaJS.  To use the exact version that National Map is expecting, do:\n\n\ncd nationalmap\ngrep terriajs package.json\n# will print something like: \nterriajs\n: \n0.0.23\n\ncd ../terriajs\ngit checkout 0.0.23 # version from above\n\n# Create a new branch to hold your changes.\ngit checkout -b someBranchName\n\n\n\n\nIf you're planning to upgrade National Map's version of TerriaJS, you may choose to use \nmaster\n instead of the precise version listed in \npackage.json\n.\n\n\nNext, link your local version of TerriaJS into the global npm package repository:\n\n\ncd terriajs\nnpm link\n\n\n\n\nThen, link the now global \nterriajs\n package into National Map:\n\n\ncd nationalmap\nnpm link terriajs\n\n\n\n\nThis process essentially makes National Map's \nnode_modules/terriajs\n into a symlink to your \nterriajs\n directory cloned from git.  Any changes you make to TerriaJS will be automatically picked up by National Map.  Don't forget to run \nnpm install\n in TerriaJS after pulling new changes or modifying \npackage.json\n.  You will also need to build TerriaJS (by running \ngulp\n) if you modify any Cesium shaders or make changes to Cesium code that could affect Cesium's WebWorkers.\n\n\nTo switch National Map back to using the npm version of TerriaJS, do:\n\n\nnpm unlink terriajs\nnpm install\n\n\n\n\nCommitting modifications\n\n\nIf you make changes to TerriaJS and National Map together, here's the process for getting them to production.\n\n\nFirst, commit your TerriaJS changes to a branch and open a pull request to merge that branch to master. Simultaneously, you may want to make a branch of National Map that uses your modified version of TerriaJS.  To do that, modify National Map's \npackage.json\n.  Where it has a line like:\n\n\nterriajs\n: \n^0.0.27\n,\n\n\n\n\nChange it to:\n\n\nterriajs\n: \ngit://github.com/TerriaJS/terriajs.git#branchName\n,\n\n\n\n\nReplace \nbranchName\n with the name of the TerriaJS branch you want to use.  You may even use a repository other than \nTerriaJS/terriajs\n if your branch is in a fork of TerriaJS instead of in the official repository.\n\n\nOnce your TerriaJS pull request has been merged and a new version of the \nterriajs\n npm module has been published, please remember to update \npackage.json\n to point to an official \nterriajs\n version instead of a branch in a GitHub repo.\n\n\nWhen at all possible, the \npackage.json\n in the \nmaster\n branch should point to official releases of \nterriajs\n on npm, NOT GitHub branches.\n\n\nRelease Build\n\n\nIf you want to make a minified release build use the commands:\n\n\nnpm install\ngulp release\nnpm start\n\n\n\n\nDocumentation\n\n\nDocumentation is automatically generated from the source via jdocs.  It will be placed in the public/doc folder.  \n\n\nIt is still very early stages, so the documentation is rather minimal and referencing the source code is probably a better way to determine the best way to use the existing functionality.\n\n\nYou can click \nhere\n to reference the documentation on the National Map site.\n\n\nTests / Specs\n\n\nThe test suite is run by opening a web browser on \nhttp://localhost:3001/SpecRunner.html\n.  The specs themselves are found in the \ntest/\n directory.\n\n\nGulp Tasks\n\n\n\n\ndefault - Invoked by running gulp without any arguments, this task invokes the \nbuild\n and \nlint\n tasks.\n\n\nbuild\n - Builds a non-minified version of National Map AND Cesium, together in one JS file (called \npublic/build/ausglobe.js\n). Only the parts of Cesium that we use (directly or indirectly) are pulled in. This task builds both the application and the specs.  This task may take 10 seconds or more, which is the main reason for the next task.\n\n\nwatch\n - Starts the same as \nbuild\n but then it stays running and watches for changes to any National Map, spec, or Cesium source file that was pulled in to \nausglobe.js\n. When a change to any of these files is detected, a fast incremental build is automatically kicked off.  The incremental build is much faster than the full rebuild because dependencies between source files are cached.\n\n\nrelease\n - The same as \nbuild\n except that it also minifies \nausglobe.js\n.  This task should be used when building for production.\n\n\nbuild-app\n - The same as \nbuild\n, except it builds just the app, not the specs.\n\n\nbuild-specs\n - The same as \nbuild\n, except it builds just the specs, not the app.  Note that the specs do not actually depending on the app, so there is no need to \nbuild-app\n if you're just iterating on the specs, even if you change app source files.\n\n\nwatch-app\n - Watches just the app for changes.\n\n\nwatch-specs\n - Watches just the specs for changes.\n\n\nrelease-app\n - Does a release build of just the app.\n\n\nrelease-specs\n - Does a release build of just the specs.\n\n\nlint\n - Runs jshint on the files in the \nsrc\n folder and reports any problems.  Our \n.jshintrc\n file is mostly just copied from Cesium at the moment, so suggested changes are welcome.\n\n\ndocs\n - Generates reference documentation for the files in the \nsrc\n folder.", 
            "title": "Development Environment"
        }, 
        {
            "location": "/Contributors/Development-environment/#setting-up-a-terriajs-development-environment", 
            "text": "First,  deploy and build your instance .", 
            "title": "Setting up a TerriaJS development environment"
        }, 
        {
            "location": "/Contributors/Development-environment/#updating-build", 
            "text": "The following commands are what you would normally run to pull changes from GitHub and build them:  git pull --rebase\nnpm install\ngulp\nnpm start", 
            "title": "Updating Build"
        }, 
        {
            "location": "/Contributors/Development-environment/#building-a-terria-based-site-against-a-modified-terriajs", 
            "text": "What if you need to make changes to  TerriaJS  while working on a site that depends on it?  In the process above, the  TerriaJS package  is installed to the  node_modules  directory by  npm install .  Please do not edit TerriaJS directly in the  node_modules  directory, because changes will be clobbered the next time you run  npm install .  Instead, follow these instructions.  First, set up a TerriaJS dev environment on your system by following the  instructions .  Then, checkout an appropriate version of TerriaJS.  To use the exact version that National Map is expecting, do:  cd nationalmap\ngrep terriajs package.json\n# will print something like:  terriajs :  0.0.23 \ncd ../terriajs\ngit checkout 0.0.23 # version from above\n\n# Create a new branch to hold your changes.\ngit checkout -b someBranchName  If you're planning to upgrade National Map's version of TerriaJS, you may choose to use  master  instead of the precise version listed in  package.json .  Next, link your local version of TerriaJS into the global npm package repository:  cd terriajs\nnpm link  Then, link the now global  terriajs  package into National Map:  cd nationalmap\nnpm link terriajs  This process essentially makes National Map's  node_modules/terriajs  into a symlink to your  terriajs  directory cloned from git.  Any changes you make to TerriaJS will be automatically picked up by National Map.  Don't forget to run  npm install  in TerriaJS after pulling new changes or modifying  package.json .  You will also need to build TerriaJS (by running  gulp ) if you modify any Cesium shaders or make changes to Cesium code that could affect Cesium's WebWorkers.  To switch National Map back to using the npm version of TerriaJS, do:  npm unlink terriajs\nnpm install", 
            "title": "Building a Terria based site against a modified TerriaJS"
        }, 
        {
            "location": "/Contributors/Development-environment/#committing-modifications", 
            "text": "If you make changes to TerriaJS and National Map together, here's the process for getting them to production.  First, commit your TerriaJS changes to a branch and open a pull request to merge that branch to master. Simultaneously, you may want to make a branch of National Map that uses your modified version of TerriaJS.  To do that, modify National Map's  package.json .  Where it has a line like:  terriajs :  ^0.0.27 ,  Change it to:  terriajs :  git://github.com/TerriaJS/terriajs.git#branchName ,  Replace  branchName  with the name of the TerriaJS branch you want to use.  You may even use a repository other than  TerriaJS/terriajs  if your branch is in a fork of TerriaJS instead of in the official repository.  Once your TerriaJS pull request has been merged and a new version of the  terriajs  npm module has been published, please remember to update  package.json  to point to an official  terriajs  version instead of a branch in a GitHub repo.  When at all possible, the  package.json  in the  master  branch should point to official releases of  terriajs  on npm, NOT GitHub branches.", 
            "title": "Committing modifications"
        }, 
        {
            "location": "/Contributors/Development-environment/#release-build", 
            "text": "If you want to make a minified release build use the commands:  npm install\ngulp release\nnpm start", 
            "title": "Release Build"
        }, 
        {
            "location": "/Contributors/Development-environment/#documentation", 
            "text": "Documentation is automatically generated from the source via jdocs.  It will be placed in the public/doc folder.    It is still very early stages, so the documentation is rather minimal and referencing the source code is probably a better way to determine the best way to use the existing functionality.  You can click  here  to reference the documentation on the National Map site.", 
            "title": "Documentation"
        }, 
        {
            "location": "/Contributors/Development-environment/#tests-specs", 
            "text": "The test suite is run by opening a web browser on  http://localhost:3001/SpecRunner.html .  The specs themselves are found in the  test/  directory.", 
            "title": "Tests / Specs"
        }, 
        {
            "location": "/Contributors/Development-environment/#gulp-tasks", 
            "text": "default - Invoked by running gulp without any arguments, this task invokes the  build  and  lint  tasks.  build  - Builds a non-minified version of National Map AND Cesium, together in one JS file (called  public/build/ausglobe.js ). Only the parts of Cesium that we use (directly or indirectly) are pulled in. This task builds both the application and the specs.  This task may take 10 seconds or more, which is the main reason for the next task.  watch  - Starts the same as  build  but then it stays running and watches for changes to any National Map, spec, or Cesium source file that was pulled in to  ausglobe.js . When a change to any of these files is detected, a fast incremental build is automatically kicked off.  The incremental build is much faster than the full rebuild because dependencies between source files are cached.  release  - The same as  build  except that it also minifies  ausglobe.js .  This task should be used when building for production.  build-app  - The same as  build , except it builds just the app, not the specs.  build-specs  - The same as  build , except it builds just the specs, not the app.  Note that the specs do not actually depending on the app, so there is no need to  build-app  if you're just iterating on the specs, even if you change app source files.  watch-app  - Watches just the app for changes.  watch-specs  - Watches just the specs for changes.  release-app  - Does a release build of just the app.  release-specs  - Does a release build of just the specs.  lint  - Runs jshint on the files in the  src  folder and reports any problems.  Our  .jshintrc  file is mostly just copied from Cesium at the moment, so suggested changes are welcome.  docs  - Generates reference documentation for the files in the  src  folder.", 
            "title": "Gulp Tasks"
        }, 
        {
            "location": "/Contributors/Contributing-to-TerriaJS/", 
            "text": "Working on TerriaJS and Cesium\n\n\nWhat if you need to make changes to \nCesium\n while working on TerriaJS?\n\n\nIn the deployment process, the \nterriajs-cesium package\n is installed to the \nnode_modules\n directory by \nnpm install\n.  Please do not edit Cesium directly in the \nnode_modules\n directory, because changes will be clobbered the next time you run \nnpm install\n.  Instead, follow these instructions.\n\n\nFirst, set up a Cesium dev environment on your system by following the \ninstructions\n.  Consider checking out TerriaJS/cesium instead of the official Cesium repository on GitHub.  Then, checkout an appropriate version of Cesium.  To use the exact version that Cesium is expecting (assuming you're working in the TerriaJS fork), do:\n\n\ncd terriajs\ngrep terriajs-cesium package.json\n# will print something like: \nterriajs-cesium\n: \n0.0.6\n\ncd ../Cesium\ngit checkout 0.0.6 # version from above\n\n# Create a new branch to hold your changes.\ngit checkout -b someBranchName\n\n\n\n\nIf you're planning to upgrade TerriaJS's version of Cesium, you may choose to use the \nterriajs\n branch and merge in master from the official Cesium repository, instead of the precise version listed in \npackage.json\n.\n\n\nIf using the \nterriajs\n branch, use gulp task \nterria-default\n in order to build Cesium's assets for TerriaJS.\n\n\nNext, link your local version of Cesium into the global npm package repository:\n\n\ncd cesium\nnpm link\n\n\n\n\nThen, link the now global \nterriajs-cesium\n package into National Map:\n\n\ncd terriajs\nnpm link terriajs-cesium\n\n\n\n\nThis process essentially makes National Map's \nnode_modules/terriajs-cesium\n into a symlink to your \ncesium\n directory cloned from git.  Any changes you make to Cesium will be automatically picked up by TerriaJS.  Don't forget to run \nnpm install\n in Cesium after pulling new changes or modifying \npackage.json\n.  You will also need to build Cesium (by running \ngulp\n) if you modify any Cesium shaders or make changes to Cesium code that could affect Cesium's WebWorkers.\n\n\nTo switch TerriaJS back to using the npm version of Cesium, do:\n\n\nnpm unlink terriajs-cesium\nnpm install\n\n\n\n\nCommitting modifications\n\n\nIf you make changes to Cesium and TerriaJS together, here's the process for getting them to production.\n\n\nFirst, commit your Cesium changes to a branch and open a pull request to merge that branch to master in the official Cesium repo. Simultaneously, you may want to make a branch of TerriaJS that uses your modified version of Cesium.  To do that, modify TerriaJS's \npackage.json\n.  Where it has a line like:\n\n\nterriajs-cesium\n: \n^0.0.6\n,\n\n\n\n\nChange it to:\n\n\nterriajs-cesium\n: \ngit://github.com/TerriaJS/cesium.git#branchName\n,\n\n\n\n\nReplace \nbranchName\n with the name of the Cesium branch you want to use.  You may even use a repository other than \nTerriaJS/cesium\n if your branch is in a fork of Cesium instead of in the official repository.\n\n\nOnce your Cesium pull request has been merged and a new version of the \nterriajs-cesium\n npm module has been published, please remember to update \npackage.json\n to point to an official \nterriajs-cesium\n version instead of a branch in a GitHub repo.\n\n\nWhen at all possible, the \npackage.json\n in the \nmaster\n branch should point to official releases of \nterriajs-cesium\n on npm, NOT GitHub branches.", 
            "title": "Working with TerriaJS and Cesium"
        }, 
        {
            "location": "/Contributors/Contributing-to-TerriaJS/#working-on-terriajs-and-cesium", 
            "text": "What if you need to make changes to  Cesium  while working on TerriaJS?  In the deployment process, the  terriajs-cesium package  is installed to the  node_modules  directory by  npm install .  Please do not edit Cesium directly in the  node_modules  directory, because changes will be clobbered the next time you run  npm install .  Instead, follow these instructions.  First, set up a Cesium dev environment on your system by following the  instructions .  Consider checking out TerriaJS/cesium instead of the official Cesium repository on GitHub.  Then, checkout an appropriate version of Cesium.  To use the exact version that Cesium is expecting (assuming you're working in the TerriaJS fork), do:  cd terriajs\ngrep terriajs-cesium package.json\n# will print something like:  terriajs-cesium :  0.0.6 \ncd ../Cesium\ngit checkout 0.0.6 # version from above\n\n# Create a new branch to hold your changes.\ngit checkout -b someBranchName  If you're planning to upgrade TerriaJS's version of Cesium, you may choose to use the  terriajs  branch and merge in master from the official Cesium repository, instead of the precise version listed in  package.json .  If using the  terriajs  branch, use gulp task  terria-default  in order to build Cesium's assets for TerriaJS.  Next, link your local version of Cesium into the global npm package repository:  cd cesium\nnpm link  Then, link the now global  terriajs-cesium  package into National Map:  cd terriajs\nnpm link terriajs-cesium  This process essentially makes National Map's  node_modules/terriajs-cesium  into a symlink to your  cesium  directory cloned from git.  Any changes you make to Cesium will be automatically picked up by TerriaJS.  Don't forget to run  npm install  in Cesium after pulling new changes or modifying  package.json .  You will also need to build Cesium (by running  gulp ) if you modify any Cesium shaders or make changes to Cesium code that could affect Cesium's WebWorkers.  To switch TerriaJS back to using the npm version of Cesium, do:  npm unlink terriajs-cesium\nnpm install", 
            "title": "Working on TerriaJS and Cesium"
        }, 
        {
            "location": "/Contributors/Contributing-to-TerriaJS/#committing-modifications", 
            "text": "If you make changes to Cesium and TerriaJS together, here's the process for getting them to production.  First, commit your Cesium changes to a branch and open a pull request to merge that branch to master in the official Cesium repo. Simultaneously, you may want to make a branch of TerriaJS that uses your modified version of Cesium.  To do that, modify TerriaJS's  package.json .  Where it has a line like:  terriajs-cesium :  ^0.0.6 ,  Change it to:  terriajs-cesium :  git://github.com/TerriaJS/cesium.git#branchName ,  Replace  branchName  with the name of the Cesium branch you want to use.  You may even use a repository other than  TerriaJS/cesium  if your branch is in a fork of Cesium instead of in the official repository.  Once your Cesium pull request has been merged and a new version of the  terriajs-cesium  npm module has been published, please remember to update  package.json  to point to an official  terriajs-cesium  version instead of a branch in a GitHub repo.  When at all possible, the  package.json  in the  master  branch should point to official releases of  terriajs-cesium  on npm, NOT GitHub branches.", 
            "title": "Committing modifications"
        }, 
        {
            "location": "/Contributors/Setting-up-Saucelabs-Locally/", 
            "text": "Get an account from https://saucelabs.com/opensauce/. I set it to my fork of Terria but I'm not sure if this is necessary. Be careful of this because I started getting spam to my brand new csiro address within half an hour of putting it in their form.\n\n\nDON'T bother installing any tunnels or any of that nonsense that it tells you to do. This is actually automatically handled by sauce's npm module which is pretty sweet.\n\n\nGo to \"My Account\" in saucelabs (bottom left menu) and copy your access key (middle of the page roughly).\n\n\nSet env variables for SAUCE_USERNAME and SAUCE_ACCESS_KEY using your OS's method for doing that (\nexport\n in bash) with your sauce username and the access key you just copied.\n\n\nRun \nnpm install -g karma-cli\n Without this karma will sort-of work but give you confusing errors.\n\n\nRun \nnpm start\n in your \nterriajs\n dir in another terminal.\n\n\nRun \ngulp test-saucelabs\n if you have a \nkarma-saucelabs.conf.js\n file, or run \nkarma start\n from the TerriaJS directory if you have a \nkarma.config.js\n file.\n\n\n\n\nIf you want to narrow down the browsers being run (i.e. only run IE9), you can remove them from \nkarma[-saucelabs].config.js\n under \nbrowsers\n.", 
            "title": "Setting up Saucelabs"
        }, 
        {
            "location": "/Contributors/Using-Docker/", 
            "text": "Docker\n\n\nIf you intend to deploy using docker, Dockerfiles have been provided for nationalmap and varnish. There are currently no hosted builds of these images. To build and deploy these docker images locally:\n\n\nnpm install\ngulp release\n\n# Build the application server image.\nsudo docker build -t nationalmap/backend .\n\n# Build the varnish image.\nsudo docker build -t nationalmap/varnish varnish/\n\n# Start the backend image you built.\nsudo docker run -d -p 3001 --name nationalmap nationalmap/backend\n\n# Start the varnish image you built.\nsudo docker run -d -p 80:80 --name varnish --link nationalmap:nm nationalmap/varnish\n\n\n\n\nThis exposes varnish on port 80. Port 3001 for nationalmap remains behind docker's NAT. If you wish to interact with it directly change\n\n\n-p \ninternal port\n\n\n\n\n\nwith\n\n\n-p \nexternal port\n:\ninternal port\n\n\n\n\n\nfor this component.\n\n\nThere is also a docker_release.sh bash script available that will carry out these commands and post to an AWS instance.  If you are not deploying on AWS you can use the script as a starting point for creating your own script.\n\n\n    Syntax: deploy_release pem_file host_name_or_ip\n    example: deploy_release login.pem 54.79.62.244\n\n\n\n\nSome handy commands:\n\n\n# If you want to avoid using sudo on every docker command (log out and log in after)\nsudo groupadd docker\nsudo gpasswd -a ${USER} docker\n\n# If you want to open a shell into the running docker container, you can use this command:\nsudo docker run -ti nationalmap/backend /bin/bash\n\n# To remove all containers\nsudo docker rm $(sudo docker ps -a -q)\n\n# To remove all images\nsudo docker rmi $(sudo docker images -a -q)\n\n# To save created images to a tar file\nsudo docker save nationalmap/backend \n nm_backend.tar\nsudo docker save nationalmap/varnish \n nm_varnish.tar\n\n# And to load them back in\nsudo docker load \n nm_backend.tar\nsudo docker load \n nm_varnish.tar\n\n\n\n\nIf you're deploying varnish to an environment with less than 25GB on the root file system, or for whatever reason you want to specify the location of the cache file e.g. using an EBS volume, you can set the path for that:\n\n\ndocker run -d -p 80:80 --name varnish -v \ncache-dir\n:/mnt/cache/varnish --link nationalmap:nm nationalmap/varnish\n\n\n\n\nThe current release with ubuntu 14.04 is rather old and is missing some useful commands.  To update to the most recent of release of Docker, use the commands below from \nhere\n.\n\n\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\nsudo sh -c \necho deb https://get.docker.io/ubuntu docker main \n /etc/apt/sources.list.d/docker.list\n\nsudo apt-get update\nsudo apt-get install lxc-docker", 
            "title": "Using Docker"
        }, 
        {
            "location": "/Contributors/Using-Docker/#docker", 
            "text": "If you intend to deploy using docker, Dockerfiles have been provided for nationalmap and varnish. There are currently no hosted builds of these images. To build and deploy these docker images locally:  npm install\ngulp release\n\n# Build the application server image.\nsudo docker build -t nationalmap/backend .\n\n# Build the varnish image.\nsudo docker build -t nationalmap/varnish varnish/\n\n# Start the backend image you built.\nsudo docker run -d -p 3001 --name nationalmap nationalmap/backend\n\n# Start the varnish image you built.\nsudo docker run -d -p 80:80 --name varnish --link nationalmap:nm nationalmap/varnish  This exposes varnish on port 80. Port 3001 for nationalmap remains behind docker's NAT. If you wish to interact with it directly change  -p  internal port   with  -p  external port : internal port   for this component.  There is also a docker_release.sh bash script available that will carry out these commands and post to an AWS instance.  If you are not deploying on AWS you can use the script as a starting point for creating your own script.      Syntax: deploy_release pem_file host_name_or_ip\n    example: deploy_release login.pem 54.79.62.244  Some handy commands:  # If you want to avoid using sudo on every docker command (log out and log in after)\nsudo groupadd docker\nsudo gpasswd -a ${USER} docker\n\n# If you want to open a shell into the running docker container, you can use this command:\nsudo docker run -ti nationalmap/backend /bin/bash\n\n# To remove all containers\nsudo docker rm $(sudo docker ps -a -q)\n\n# To remove all images\nsudo docker rmi $(sudo docker images -a -q)\n\n# To save created images to a tar file\nsudo docker save nationalmap/backend   nm_backend.tar\nsudo docker save nationalmap/varnish   nm_varnish.tar\n\n# And to load them back in\nsudo docker load   nm_backend.tar\nsudo docker load   nm_varnish.tar  If you're deploying varnish to an environment with less than 25GB on the root file system, or for whatever reason you want to specify the location of the cache file e.g. using an EBS volume, you can set the path for that:  docker run -d -p 80:80 --name varnish -v  cache-dir :/mnt/cache/varnish --link nationalmap:nm nationalmap/varnish  The current release with ubuntu 14.04 is rather old and is missing some useful commands.  To update to the most recent of release of Docker, use the commands below from  here .  sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\nsudo sh -c  echo deb https://get.docker.io/ubuntu docker main   /etc/apt/sources.list.d/docker.list \nsudo apt-get update\nsudo apt-get install lxc-docker", 
            "title": "Docker"
        }
    ]
}